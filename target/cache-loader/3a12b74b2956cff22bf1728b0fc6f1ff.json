{"remainingRequest":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js??ref--10-2!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js??ref--10-3!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/course-cart-bridge/course-cart-bridge.service.ts","dependencies":[{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/course-cart-bridge/course-cart-bridge.service.ts","mtime":1546686930000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/cache-loader/dist/cjs.js","mtime":1546694544000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js","mtime":1546694542000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar moment = require(\"moment\");\nvar operators_1 = require(\"rxjs/operators\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar shared_1 = require(\"app/shared\");\nvar CourseCartBridgeService = /** @class */ (function () {\n    function CourseCartBridgeService(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/course-cart-bridges';\n        this.resourceSearchUrl = app_constants_1.SERVER_API_URL + 'api/_search/course-cart-bridges';\n        this.resourceCollectionUrl = app_constants_1.SERVER_API_URL + 'api/collection/course-cart-bridges';\n        this.resourceInstancesUrl = app_constants_1.SERVER_API_URL + 'api/instances/course-cart-bridges';\n    }\n    CourseCartBridgeService.prototype.create = function (courseCartBridge) {\n        var _this = this;\n        var copy = this.convertDateFromClient(courseCartBridge);\n        return this.http\n            .post(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    CourseCartBridgeService.prototype.getcollection = function (id) {\n        return this.http.get(this.resourceCollectionUrl + \"/\" + id);\n    };\n    CourseCartBridgeService.prototype.getinstance = function (courseid, cartid) {\n        return this.http.post(this.resourceInstancesUrl, { cartId: cartid, courseId: courseid });\n    };\n    CourseCartBridgeService.prototype.update = function (courseCartBridge) {\n        var _this = this;\n        var copy = this.convertDateFromClient(courseCartBridge);\n        return this.http\n            .put(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    CourseCartBridgeService.prototype.find = function (id) {\n        var _this = this;\n        return this.http\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    CourseCartBridgeService.prototype.query = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    CourseCartBridgeService.prototype.delete = function (id) {\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\n    };\n    CourseCartBridgeService.prototype.search = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    CourseCartBridgeService.prototype.convertDateFromClient = function (courseCartBridge) {\n        var copy = Object.assign({}, courseCartBridge, {\n            timestamp: courseCartBridge.timestamp != null && courseCartBridge.timestamp.isValid() ? courseCartBridge.timestamp.toJSON() : null\n        });\n        return copy;\n    };\n    CourseCartBridgeService.prototype.convertDateFromServer = function (res) {\n        res.body.timestamp = res.body.timestamp != null ? moment(res.body.timestamp) : null;\n        return res;\n    };\n    CourseCartBridgeService.prototype.convertDateArrayFromServer = function (res) {\n        res.body.forEach(function (courseCartBridge) {\n            courseCartBridge.timestamp = courseCartBridge.timestamp != null ? moment(courseCartBridge.timestamp) : null;\n        });\n        return res;\n    };\n    CourseCartBridgeService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], CourseCartBridgeService);\n    return CourseCartBridgeService;\n    var _a;\n}());\nexports.CourseCartBridgeService = CourseCartBridgeService;\n",{"version":3,"file":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/course-cart-bridge/course-cart-bridge.service.ts","sourceRoot":"","sources":["/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/course-cart-bridge/course-cart-bridge.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as moment from 'moment';\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared';\nimport { ICourseCartBridge } from 'app/shared/model/course-cart-bridge.model';\n\ntype EntityResponseType = HttpResponse<ICourseCartBridge>;\ntype EntityArrayResponseType = HttpResponse<ICourseCartBridge[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class CourseCartBridgeService {\n    private resourceUrl = SERVER_API_URL + 'api/course-cart-bridges';\n    private resourceSearchUrl = SERVER_API_URL + 'api/_search/course-cart-bridges';\n    private resourceCollectionUrl = SERVER_API_URL + 'api/collection/course-cart-bridges';\n    private resourceInstancesUrl = SERVER_API_URL + 'api/instances/course-cart-bridges';\n\n    constructor(private http: HttpClient) {}\n\n    create(courseCartBridge: ICourseCartBridge): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(courseCartBridge);\n        return this.http\n            .post<ICourseCartBridge>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    getcollection(id: number): Observable<ICourseCartBridge[]> {\n        return this.http.get<ICourseCartBridge[]>(`${this.resourceCollectionUrl}/${id}`);\n    }\n\n    getinstance(courseid: number, cartid: number): Observable<ICourseCartBridge> {\n        return this.http.post<ICourseCartBridge>(this.resourceInstancesUrl, { cartId: cartid, courseId: courseid });\n    }\n\n    update(courseCartBridge: ICourseCartBridge): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(courseCartBridge);\n        return this.http\n            .put<ICourseCartBridge>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<ICourseCartBridge>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ICourseCartBridge[]>(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n    }\n\n    search(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ICourseCartBridge[]>(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    private convertDateFromClient(courseCartBridge: ICourseCartBridge): ICourseCartBridge {\n        const copy: ICourseCartBridge = Object.assign({}, courseCartBridge, {\n            timestamp:\n                courseCartBridge.timestamp != null && courseCartBridge.timestamp.isValid() ? courseCartBridge.timestamp.toJSON() : null\n        });\n        return copy;\n    }\n\n    private convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        res.body.timestamp = res.body.timestamp != null ? moment(res.body.timestamp) : null;\n        return res;\n    }\n\n    private convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        res.body.forEach((courseCartBridge: ICourseCartBridge) => {\n            courseCartBridge.timestamp = courseCartBridge.timestamp != null ? moment(courseCartBridge.timestamp) : null;\n        });\n        return res;\n    }\n}\n"]}]}