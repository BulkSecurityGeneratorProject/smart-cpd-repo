{"remainingRequest":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js??ref--10-2!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js??ref--10-3!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/primeng/inputs/autocomplete/autocompletedemo.component.ts","dependencies":[{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/primeng/inputs/autocomplete/autocompletedemo.component.ts","mtime":1546132670000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/cache-loader/dist/cjs.js","mtime":1546694544000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js","mtime":1546694542000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar country_service_1 = require(\"./service/country.service\");\nvar AutocompleteDemoComponent = /** @class */ (function () {\n    function AutocompleteDemoComponent(countryService) {\n        this.countryService = countryService;\n        this.topAsiaCountries = [\n            'Singapore',\n            'Hong Kong',\n            'South Korea',\n            'Japan',\n            'Israel',\n            'Brunei',\n            'Qatar',\n            'Cyprus',\n            'Saudi Arabia',\n            'United Arab Emirates'\n        ];\n        this.selectedType = 'readonly';\n        this.msgs = [];\n        this.activeIndex = 0;\n    }\n    AutocompleteDemoComponent.prototype.onFocus = function () {\n        this.msgs = [];\n        this.msgs.push({ severity: 'info', summary: 'The autocomplete gets focus' });\n    };\n    AutocompleteDemoComponent.prototype.onBlur = function () {\n        this.msgs = [];\n        this.msgs.push({ severity: 'info', summary: 'The autocomplete loses focus' });\n    };\n    AutocompleteDemoComponent.prototype.onSelect = function () {\n        this.msgs = [];\n        this.msgs.push({ severity: 'info', summary: 'The autocomplete suggestion is selected' });\n    };\n    AutocompleteDemoComponent.prototype.onUnselect = function () {\n        this.msgs = [];\n        this.msgs.push({ severity: 'info', summary: 'The autocomplete selected item is removed' });\n    };\n    AutocompleteDemoComponent.prototype.onClearInput = function (event) {\n        this.msgs = [];\n        this.msgs.push({ severity: 'info', summary: 'The autocomplete input is cleared' });\n    };\n    AutocompleteDemoComponent.prototype.filterCountryInstances = function (event) {\n        var _this = this;\n        var query = event.query;\n        this.countryService.getCountries().subscribe(function (countries) {\n            _this.filteredCountryInstances = _this.filterCountry(query, countries.data);\n        });\n    };\n    AutocompleteDemoComponent.prototype.filterCountries = function (event) {\n        var _this = this;\n        var query = event.query;\n        this.countryService.getCountries().subscribe(function (countries) {\n            _this.filteredCountries = _this.filterCountry(query, countries.data);\n        });\n    };\n    AutocompleteDemoComponent.prototype.filterCountriesMultiple = function (event) {\n        var _this = this;\n        var query = event.query;\n        this.countryService.getCountries().subscribe(function (countries) {\n            _this.filteredCountriesMultiple = _this.filterCountry(query, countries.data);\n        });\n    };\n    AutocompleteDemoComponent.prototype.filterCustomCountries = function (event) {\n        var _this = this;\n        var query = event.query;\n        this.countryService.getCountries().subscribe(function (countries) {\n            _this.filteredCustomCountries = _this.filterCountry(query, countries.data);\n        });\n    };\n    AutocompleteDemoComponent.prototype.filterTopAsiaCountries = function (event) {\n        this.filteredTopAsiaCountries = [];\n        for (var _i = 0, _a = this.topAsiaCountries; _i < _a.length; _i++) {\n            var country = _a[_i];\n            if (country.toLowerCase().indexOf(event.query.toLowerCase()) === 0) {\n                this.filteredTopAsiaCountries.push(country);\n            }\n        }\n    };\n    AutocompleteDemoComponent.prototype.handleDropdownClick = function () {\n        var _this = this;\n        this.filteredTopAsiaCountries = [];\n        setTimeout(function () {\n            _this.filteredTopAsiaCountries = _this.topAsiaCountries;\n        }, 100);\n    };\n    AutocompleteDemoComponent.prototype.filterCountry = function (query, countries) {\n        var filtered = [];\n        for (var _i = 0, countries_1 = countries; _i < countries_1.length; _i++) {\n            var country = countries_1[_i];\n            if (country.name.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n                filtered.push(country);\n            }\n        }\n        return filtered;\n    };\n    AutocompleteDemoComponent.prototype.ngOnInit = function () {\n        this.types = [];\n        this.types.push({ label: 'ReadOnly', value: 'readonly' });\n        this.types.push({ label: 'Disabled', value: 'disable' });\n    };\n    AutocompleteDemoComponent.prototype.onChangeStep = function (label) {\n        this.msgs.length = 0;\n        this.msgs.push({ severity: 'info', summary: label });\n    };\n    AutocompleteDemoComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-autocomplete',\n            templateUrl: './autocompletedemo.component.html',\n            styles: []\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof country_service_1.CountryService !== \"undefined\" && country_service_1.CountryService) === \"function\" && _a || Object])\n    ], AutocompleteDemoComponent);\n    return AutocompleteDemoComponent;\n    var _a;\n}());\nexports.AutocompleteDemoComponent = AutocompleteDemoComponent;\n",{"version":3,"file":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/primeng/inputs/autocomplete/autocompletedemo.component.ts","sourceRoot":"","sources":["/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/primeng/inputs/autocomplete/autocompletedemo.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Message, SelectItem } from 'primeng/components/common/api';\nimport { CountryService } from './service/country.service';\nimport Country from './service/country';\n\n@Component({\n    selector: 'jhi-autocomplete',\n    templateUrl: './autocompletedemo.component.html',\n    styles: []\n})\nexport class AutocompleteDemoComponent implements OnInit {\n    country: Country;\n    countries: Country[];\n    topcountry: string;\n    topcountrySingle: string;\n    topAsianCountry: string;\n    countryInstance: Country;\n    customCountry: Country;\n    topAsiaCountries: string[] = [\n        'Singapore',\n        'Hong Kong',\n        'South Korea',\n        'Japan',\n        'Israel',\n        'Brunei',\n        'Qatar',\n        'Cyprus',\n        'Saudi Arabia',\n        'United Arab Emirates'\n    ];\n    filteredCountries: Country[];\n    filteredCountriesMultiple: Country[];\n    filteredTopAsiaCountries: any[];\n    filteredCountryInstances: Country[];\n    filteredCustomCountries: Country[];\n    selectedType = 'readonly';\n    types: SelectItem[];\n    msgs: Message[] = [];\n    activeIndex = 0;\n\n    constructor(private countryService: CountryService) {}\n\n    onFocus() {\n        this.msgs = [];\n        this.msgs.push({ severity: 'info', summary: 'The autocomplete gets focus' });\n    }\n\n    onBlur() {\n        this.msgs = [];\n        this.msgs.push({ severity: 'info', summary: 'The autocomplete loses focus' });\n    }\n\n    onSelect() {\n        this.msgs = [];\n        this.msgs.push({ severity: 'info', summary: 'The autocomplete suggestion is selected' });\n    }\n\n    onUnselect() {\n        this.msgs = [];\n        this.msgs.push({ severity: 'info', summary: 'The autocomplete selected item is removed' });\n    }\n\n    onClearInput(event: any) {\n        this.msgs = [];\n        this.msgs.push({ severity: 'info', summary: 'The autocomplete input is cleared' });\n    }\n\n    filterCountryInstances(event: any) {\n        const query = event.query;\n        this.countryService.getCountries().subscribe((countries: any) => {\n            this.filteredCountryInstances = this.filterCountry(query, countries.data);\n        });\n    }\n\n    filterCountries(event: any) {\n        const query = event.query;\n        this.countryService.getCountries().subscribe((countries: any) => {\n            this.filteredCountries = this.filterCountry(query, countries.data);\n        });\n    }\n\n    filterCountriesMultiple(event: any) {\n        const query = event.query;\n        this.countryService.getCountries().subscribe((countries: any) => {\n            this.filteredCountriesMultiple = this.filterCountry(query, countries.data);\n        });\n    }\n\n    filterCustomCountries(event: any) {\n        const query = event.query;\n        this.countryService.getCountries().subscribe((countries: any) => {\n            this.filteredCustomCountries = this.filterCountry(query, countries.data);\n        });\n    }\n\n    filterTopAsiaCountries(event: any) {\n        this.filteredTopAsiaCountries = [];\n        for (const country of this.topAsiaCountries) {\n            if (country.toLowerCase().indexOf(event.query.toLowerCase()) === 0) {\n                this.filteredTopAsiaCountries.push(country);\n            }\n        }\n    }\n\n    handleDropdownClick() {\n        this.filteredTopAsiaCountries = [];\n        setTimeout(() => {\n            this.filteredTopAsiaCountries = this.topAsiaCountries;\n        }, 100);\n    }\n\n    filterCountry(query: any, countries: Country[]): Country[] {\n        const filtered: any[] = [];\n        for (const country of countries) {\n            if (country.name.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n                filtered.push(country);\n            }\n        }\n        return filtered;\n    }\n\n    ngOnInit() {\n        this.types = [];\n        this.types.push({ label: 'ReadOnly', value: 'readonly' });\n        this.types.push({ label: 'Disabled', value: 'disable' });\n    }\n\n    onChangeStep(label: string) {\n        this.msgs.length = 0;\n        this.msgs.push({ severity: 'info', summary: label });\n    }\n}\n"]}]}