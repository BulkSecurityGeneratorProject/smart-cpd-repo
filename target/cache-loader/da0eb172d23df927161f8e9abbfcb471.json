{"remainingRequest":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js??ref--10-2!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js??ref--10-3!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/question/question.service.ts","dependencies":[{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/question/question.service.ts","mtime":1546686998000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/cache-loader/dist/cjs.js","mtime":1546694544000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js","mtime":1546694542000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar shared_1 = require(\"app/shared\");\nvar QuestionService = /** @class */ (function () {\n    function QuestionService(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/questions';\n        this.resourceSearchUrl = app_constants_1.SERVER_API_URL + 'api/_search/questions';\n        this.resourceQuizFindUrl = app_constants_1.SERVER_API_URL + 'api/_findbyquiz/questions';\n    }\n    QuestionService.prototype.create = function (question) {\n        return this.http.post(this.resourceUrl, question, { observe: 'response' });\n    };\n    QuestionService.prototype.update = function (question) {\n        return this.http.put(this.resourceUrl, question, { observe: 'response' });\n    };\n    QuestionService.prototype.find = function (id) {\n        return this.http.get(this.resourceUrl + \"/\" + id, { observe: 'response' });\n    };\n    QuestionService.prototype.query = function (req) {\n        var options = shared_1.createRequestOption(req);\n        return this.http.get(this.resourceUrl, { params: options, observe: 'response' });\n    };\n    QuestionService.prototype.delete = function (id) {\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\n    };\n    QuestionService.prototype.search = function (req) {\n        var options = shared_1.createRequestOption(req);\n        return this.http.get(this.resourceSearchUrl, { params: options, observe: 'response' });\n    };\n    QuestionService.prototype.findbyquiz = function (id) {\n        return this.http.get(this.resourceQuizFindUrl + \"/\" + id, { observe: 'response' });\n    };\n    QuestionService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], QuestionService);\n    return QuestionService;\n    var _a;\n}());\nexports.QuestionService = QuestionService;\n",{"version":3,"file":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/question/question.service.ts","sourceRoot":"","sources":["/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/question/question.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,6CAAgE;AAGhE,mDAAmD;AACnD,qCAAiD;AAOjD;IAKI,yBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAJ5B,gBAAW,GAAG,8BAAc,GAAG,eAAe,CAAC;QAC/C,sBAAiB,GAAG,8BAAc,GAAG,uBAAuB,CAAC;QAC7D,wBAAmB,GAAG,8BAAc,GAAG,2BAA2B,CAAC;IAEpC,CAAC;IAExC,gCAAM,GAAN,UAAO,QAAmB;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAY,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAC1F,CAAC;IAED,gCAAM,GAAN,UAAO,QAAmB;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAY,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACzF,CAAC;IAED,8BAAI,GAAJ,UAAK,EAAU;QACX,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAe,IAAI,CAAC,WAAW,SAAI,EAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAC1F,CAAC;IAED,+BAAK,GAAL,UAAM,GAAS;QACX,IAAM,OAAO,GAAG,4BAAmB,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAc,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAClG,CAAC;IAED,gCAAM,GAAN,UAAO,EAAU;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAS,IAAI,CAAC,WAAW,SAAI,EAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACvF,CAAC;IAED,gCAAM,GAAN,UAAO,GAAS;QACZ,IAAM,OAAO,GAAG,4BAAmB,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAc,IAAI,CAAC,iBAAiB,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACxG,CAAC;IAED,oCAAU,GAAV,UAAW,EAAU;QACjB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAiB,IAAI,CAAC,mBAAmB,SAAI,EAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACpG,CAAC;IAnCQ,eAAe;QAD3B,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qEAML,iBAAU,oBAAV,iBAAU;OAL3B,eAAe,CAoC3B;IAAD,sBAAC;;CAAA,AApCD,IAoCC;AApCY,0CAAe","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared';\nimport { IQuestion } from 'app/shared/model/question.model';\n\ntype EntityResponseType = HttpResponse<IQuestion>;\ntype EntityArrayResponseType = HttpResponse<IQuestion[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class QuestionService {\n    private resourceUrl = SERVER_API_URL + 'api/questions';\n    private resourceSearchUrl = SERVER_API_URL + 'api/_search/questions';\n    private resourceQuizFindUrl = SERVER_API_URL + 'api/_findbyquiz/questions';\n\n    constructor(private http: HttpClient) {}\n\n    create(question: IQuestion): Observable<EntityResponseType> {\n        return this.http.post<IQuestion>(this.resourceUrl, question, { observe: 'response' });\n    }\n\n    update(question: IQuestion): Observable<EntityResponseType> {\n        return this.http.put<IQuestion>(this.resourceUrl, question, { observe: 'response' });\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http.get<IQuestion>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http.get<IQuestion[]>(this.resourceUrl, { params: options, observe: 'response' });\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n    }\n\n    search(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http.get<IQuestion[]>(this.resourceSearchUrl, { params: options, observe: 'response' });\n    }\n\n    findbyquiz(id: number): Observable<EntityArrayResponseType> {\n        return this.http.get<IQuestion[]>(`${this.resourceQuizFindUrl}/${id}`, { observe: 'response' });\n    }\n}\n"]}]}