{"remainingRequest":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js??ref--10-2!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js??ref--10-3!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/time-course-log/time-course-log.service.ts","dependencies":[{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/time-course-log/time-course-log.service.ts","mtime":1546687126000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/cache-loader/dist/cjs.js","mtime":1546694544000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js","mtime":1546694542000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar moment = require(\"moment\");\nvar operators_1 = require(\"rxjs/operators\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar shared_1 = require(\"app/shared\");\nvar TimeCourseLogService = /** @class */ (function () {\n    function TimeCourseLogService(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/time-course-logs';\n        this.resourceSearchUrl = app_constants_1.SERVER_API_URL + 'api/_search/time-course-logs';\n    }\n    TimeCourseLogService.prototype.create = function (timeCourseLog) {\n        var _this = this;\n        var copy = this.convertDateFromClient(timeCourseLog);\n        return this.http\n            .post(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    TimeCourseLogService.prototype.update = function (timeCourseLog) {\n        var _this = this;\n        var copy = this.convertDateFromClient(timeCourseLog);\n        return this.http\n            .put(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    TimeCourseLogService.prototype.find = function (id) {\n        var _this = this;\n        return this.http\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    TimeCourseLogService.prototype.query = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    TimeCourseLogService.prototype.delete = function (id) {\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\n    };\n    TimeCourseLogService.prototype.gettimespent = function (courseid, custid) {\n        return this.http\n            .get(app_constants_1.SERVER_API_URL + 'api' + \"/\" + courseid + \"/\" + 'courseid}/time-course-logs' + \"/\" + custid, { observe: 'response' });\n    };\n    TimeCourseLogService.prototype.getdistinct = function (courseid, custid) {\n        return this.http\n            .get(app_constants_1.SERVER_API_URL + 'api' + \"/\" + courseid + \"/\" + 'courseid}/get/time-course-logs' + \"/\" + custid, { observe: 'response' });\n    };\n    TimeCourseLogService.prototype.search = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    TimeCourseLogService.prototype.convertDateFromClient = function (timeCourseLog) {\n        var copy = Object.assign({}, timeCourseLog, {\n            recorddate: timeCourseLog.recorddate != null && timeCourseLog.recorddate.isValid() ? timeCourseLog.recorddate.toJSON() : null\n        });\n        return copy;\n    };\n    TimeCourseLogService.prototype.convertDateFromServer = function (res) {\n        res.body.recorddate = res.body.recorddate != null ? moment(res.body.recorddate) : null;\n        return res;\n    };\n    TimeCourseLogService.prototype.convertDateArrayFromServer = function (res) {\n        res.body.forEach(function (timeCourseLog) {\n            timeCourseLog.recorddate = timeCourseLog.recorddate != null ? moment(timeCourseLog.recorddate) : null;\n        });\n        return res;\n    };\n    TimeCourseLogService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], TimeCourseLogService);\n    return TimeCourseLogService;\n    var _a;\n}());\nexports.TimeCourseLogService = TimeCourseLogService;\n",{"version":3,"file":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/time-course-log/time-course-log.service.ts","sourceRoot":"","sources":["/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/time-course-log/time-course-log.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as moment from 'moment';\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared';\nimport { ITimeCourseLog } from 'app/shared/model/time-course-log.model';\n\ntype EntityResponseType = HttpResponse<ITimeCourseLog>;\ntype EntityArrayResponseType = HttpResponse<ITimeCourseLog[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class TimeCourseLogService {\n    private resourceUrl = SERVER_API_URL + 'api/time-course-logs';\n    private resourceSearchUrl = SERVER_API_URL + 'api/_search/time-course-logs';\n\n    constructor(private http: HttpClient) {}\n\n    create(timeCourseLog: ITimeCourseLog): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(timeCourseLog);\n        return this.http\n            .post<ITimeCourseLog>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(timeCourseLog: ITimeCourseLog): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(timeCourseLog);\n        return this.http\n            .put<ITimeCourseLog>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<ITimeCourseLog>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ITimeCourseLog[]>(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n    }\n\n    gettimespent(courseid: number, custid: number): Observable<HttpResponse<number>> {\n        return this.http\n        .get<number>(`${SERVER_API_URL + 'api'}/${courseid}/${'courseid}/time-course-logs'}/${custid}`, { observe: 'response' });\n    }\n\n    getdistinct(courseid: number, custid: number): Observable<HttpResponse<ITimeCourseLog>>  {\n        return this.http\n        .get<ITimeCourseLog>(`${SERVER_API_URL + 'api'}/${courseid}/${'courseid}/get/time-course-logs'}/${custid}`, { observe: 'response' });\n    }\n\n    search(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ITimeCourseLog[]>(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    private convertDateFromClient(timeCourseLog: ITimeCourseLog): ITimeCourseLog {\n        const copy: ITimeCourseLog = Object.assign({}, timeCourseLog, {\n            recorddate: timeCourseLog.recorddate != null && timeCourseLog.recorddate.isValid() ? timeCourseLog.recorddate.toJSON() : null\n        });\n        return copy;\n    }\n\n    private convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        res.body.recorddate = res.body.recorddate != null ? moment(res.body.recorddate) : null;\n        return res;\n    }\n\n    private convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        res.body.forEach((timeCourseLog: ITimeCourseLog) => {\n            timeCourseLog.recorddate = timeCourseLog.recorddate != null ? moment(timeCourseLog.recorddate) : null;\n        });\n        return res;\n    }\n}\n"]}]}