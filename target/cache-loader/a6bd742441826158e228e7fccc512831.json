{"remainingRequest":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js??ref--10-2!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js??ref--10-3!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/section-history/section-history.service.ts","dependencies":[{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/section-history/section-history.service.ts","mtime":1546687096000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/cache-loader/dist/cjs.js","mtime":1546694544000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js","mtime":1546694542000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar moment = require(\"moment\");\nvar operators_1 = require(\"rxjs/operators\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar shared_1 = require(\"app/shared\");\nvar SectionHistoryService = /** @class */ (function () {\n    function SectionHistoryService(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/section-histories';\n        this.resourceSearchUrl = app_constants_1.SERVER_API_URL + 'api/_search/section-histories';\n        this.resourceCustomerUrl = app_constants_1.SERVER_API_URL + 'api/customer/section-histories';\n        this.resourceSectionUrl = app_constants_1.SERVER_API_URL + 'api/recent/section-history/';\n    }\n    SectionHistoryService.prototype.create = function (sectionHistory) {\n        var _this = this;\n        var copy = this.convertDateFromClient(sectionHistory);\n        return this.http\n            .post(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    SectionHistoryService.prototype.update = function (sectionHistory) {\n        var _this = this;\n        var copy = this.convertDateFromClient(sectionHistory);\n        return this.http\n            .put(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    SectionHistoryService.prototype.find = function (id) {\n        var _this = this;\n        return this.http\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    SectionHistoryService.prototype.getcustomer = function (id) {\n        return this.http.get(this.resourceCustomerUrl + \"/\" + id, { observe: 'response' });\n    };\n    SectionHistoryService.prototype.getpersistance = function (customerid, sectionid) {\n        return this.http.get(app_constants_1.SERVER_API_URL + '/customer' + \"/\" + customerid + '/section-history' + \"/\" + sectionid, { observe: 'response' });\n    };\n    SectionHistoryService.prototype.getrecent = function (id) {\n        return this.http.get(this.resourceSectionUrl + \"/\" + id, { observe: 'response' });\n    };\n    SectionHistoryService.prototype.getbycustomer = function (customerid, sectionid) {\n        return this.http.get(app_constants_1.SERVER_API_URL + \"/\" + sectionid + '/section-history' + \"/\" + customerid, { observe: 'response' });\n    };\n    SectionHistoryService.prototype.query = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    SectionHistoryService.prototype.delete = function (id) {\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\n    };\n    SectionHistoryService.prototype.search = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    SectionHistoryService.prototype.convertDateFromClient = function (sectionHistory) {\n        var copy = Object.assign({}, sectionHistory, {\n            startdate: sectionHistory.startdate != null && sectionHistory.startdate.isValid() ? sectionHistory.startdate.toJSON() : null,\n            lastactivedate: sectionHistory.lastactivedate != null && sectionHistory.lastactivedate.isValid()\n                ? sectionHistory.lastactivedate.toJSON()\n                : null\n        });\n        return copy;\n    };\n    SectionHistoryService.prototype.convertDateFromServer = function (res) {\n        res.body.startdate = res.body.startdate != null ? moment(res.body.startdate) : null;\n        res.body.lastactivedate = res.body.lastactivedate != null ? moment(res.body.lastactivedate) : null;\n        return res;\n    };\n    SectionHistoryService.prototype.convertDateArrayFromServer = function (res) {\n        res.body.forEach(function (sectionHistory) {\n            sectionHistory.startdate = sectionHistory.startdate != null ? moment(sectionHistory.startdate) : null;\n            sectionHistory.lastactivedate = sectionHistory.lastactivedate != null ? moment(sectionHistory.lastactivedate) : null;\n        });\n        return res;\n    };\n    SectionHistoryService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], SectionHistoryService);\n    return SectionHistoryService;\n    var _a;\n}());\nexports.SectionHistoryService = SectionHistoryService;\n",{"version":3,"file":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/section-history/section-history.service.ts","sourceRoot":"","sources":["/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/section-history/section-history.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,6CAAgE;AAEhE,+BAAiC;AAEjC,4CAAqC;AAErC,mDAAmD;AACnD,qCAAiD;AASjD;IAMI,+BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAL5B,gBAAW,GAAG,8BAAc,GAAG,uBAAuB,CAAC;QACvD,sBAAiB,GAAG,8BAAc,GAAG,+BAA+B,CAAC;QACrE,wBAAmB,GAAG,8BAAc,GAAG,gCAAgC,CAAC;QACxE,uBAAkB,GAAG,8BAAc,GAAG,6BAA6B,CAAC;IAErC,CAAC;IAExC,sCAAM,GAAN,UAAO,cAA+B;QAAtC,iBAKC;QAJG,IAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;QACxD,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,IAAI,CAAkB,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;aACtE,IAAI,CAAC,eAAG,CAAC,UAAC,GAAuB,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,sCAAM,GAAN,UAAO,cAA+B;QAAtC,iBAKC;QAJG,IAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;QACxD,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,GAAG,CAAkB,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;aACrE,IAAI,CAAC,eAAG,CAAC,UAAC,GAAuB,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,oCAAI,GAAJ,UAAK,EAAU;QAAf,iBAIC;QAHG,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,GAAG,CAAqB,IAAI,CAAC,WAAW,SAAI,EAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;aAC1E,IAAI,CAAC,eAAG,CAAC,UAAC,GAAuB,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,2CAAW,GAAX,UAAY,EAAU;QAClB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAuB,IAAI,CAAC,mBAAmB,SAAI,EAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAC1G,CAAC;IAED,8CAAc,GAAd,UAAe,UAAkB,EAAE,SAAiB;QAChD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAqB,8BAAc,GAAG,WAAW,SAAI,UAAU,GAAG,kBAAkB,SAAI,SAAW,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACtJ,CAAC;IAED,yCAAS,GAAT,UAAU,EAAU;QAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAc,IAAI,CAAC,kBAAkB,SAAI,EAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAChG,CAAC;IAED,6CAAa,GAAb,UAAc,UAAkB,EAAE,SAAiB;QAC/C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAqB,8BAAc,SAAI,SAAS,GAAG,kBAAkB,SAAI,UAAY,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACxI,CAAC;IAED,qCAAK,GAAL,UAAM,GAAS;QAAf,iBAKC;QAJG,IAAM,OAAO,GAAG,4BAAmB,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,GAAG,CAAoB,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;aAClF,IAAI,CAAC,eAAG,CAAC,UAAC,GAA4B,IAAK,OAAA,KAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,EAApC,CAAoC,CAAC,CAAC,CAAC;IAC3F,CAAC;IAED,sCAAM,GAAN,UAAO,EAAU;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAS,IAAI,CAAC,WAAW,SAAI,EAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACvF,CAAC;IAED,sCAAM,GAAN,UAAO,GAAS;QAAhB,iBAKC;QAJG,IAAM,OAAO,GAAG,4BAAmB,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,GAAG,CAAoB,IAAI,CAAC,iBAAiB,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;aACxF,IAAI,CAAC,eAAG,CAAC,UAAC,GAA4B,IAAK,OAAA,KAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,EAApC,CAAoC,CAAC,CAAC,CAAC;IAC3F,CAAC;IAEO,qDAAqB,GAA7B,UAA8B,cAA+B;QACzD,IAAM,IAAI,GAAoB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE;YAC5D,SAAS,EAAE,cAAc,CAAC,SAAS,IAAI,IAAI,IAAI,cAAc,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI;YAC5H,cAAc,EACV,cAAc,CAAC,cAAc,IAAI,IAAI,IAAI,cAAc,CAAC,cAAc,CAAC,OAAO,EAAE;gBAC5E,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,EAAE;gBACxC,CAAC,CAAC,IAAI;SACjB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,qDAAqB,GAA7B,UAA8B,GAAuB;QACjD,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACpF,GAAG,CAAC,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACnG,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAEO,0DAA0B,GAAlC,UAAmC,GAA4B;QAC3D,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,cAA+B;YAC7C,cAAc,CAAC,SAAS,GAAG,cAAc,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACtG,cAAc,CAAC,cAAc,GAAG,cAAc,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACzH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IArFQ,qBAAqB;QADjC,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qEAOL,iBAAU,oBAAV,iBAAU;OAN3B,qBAAqB,CAsFjC;IAAD,4BAAC;;CAAA,AAtFD,IAsFC;AAtFY,sDAAqB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as moment from 'moment';\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared';\nimport { ISectionHistory } from 'app/shared/model/section-history.model';\nimport { ICart } from 'app/shared/model/cart.model';\nimport { ISection } from 'app/shared/model/section.model';\n\ntype EntityResponseType = HttpResponse<ISectionHistory>;\ntype EntityArrayResponseType = HttpResponse<ISectionHistory[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class SectionHistoryService {\n    private resourceUrl = SERVER_API_URL + 'api/section-histories';\n    private resourceSearchUrl = SERVER_API_URL + 'api/_search/section-histories';\n    private resourceCustomerUrl = SERVER_API_URL + 'api/customer/section-histories';\n    private resourceSectionUrl = SERVER_API_URL + 'api/recent/section-history/';\n\n    constructor(private http: HttpClient) {}\n\n    create(sectionHistory: ISectionHistory): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(sectionHistory);\n        return this.http\n            .post<ISectionHistory>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(sectionHistory: ISectionHistory): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(sectionHistory);\n        return this.http\n            .put<ISectionHistory>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<ISectionHistory>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    getcustomer(id: number): Observable<EntityArrayResponseType> {\n        return this.http.get<ISectionHistory[]>(`${this.resourceCustomerUrl}/${id}`, { observe: 'response' });\n    }\n\n    getpersistance(customerid: number, sectionid: number): Observable<HttpResponse<ISectionHistory>> {\n        return this.http.get<ISectionHistory>(`${SERVER_API_URL + '/customer'}/${customerid}${'/section-history'}/${sectionid}`, { observe: 'response' });\n    }\n\n    getrecent(id: number): Observable<HttpResponse<ISection>> {\n        return this.http.get<ISection>(`${this.resourceSectionUrl}/${id}`, { observe: 'response' });\n    }\n\n    getbycustomer(customerid: number, sectionid: number): Observable<HttpResponse<ISectionHistory>> {\n        return this.http.get<ISectionHistory>(`${SERVER_API_URL}/${sectionid}${'/section-history'}/${customerid}`, { observe: 'response' });\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ISectionHistory[]>(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n    }\n\n    search(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ISectionHistory[]>(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    private convertDateFromClient(sectionHistory: ISectionHistory): ISectionHistory {\n        const copy: ISectionHistory = Object.assign({}, sectionHistory, {\n            startdate: sectionHistory.startdate != null && sectionHistory.startdate.isValid() ? sectionHistory.startdate.toJSON() : null,\n            lastactivedate:\n                sectionHistory.lastactivedate != null && sectionHistory.lastactivedate.isValid()\n                    ? sectionHistory.lastactivedate.toJSON()\n                    : null\n        });\n        return copy;\n    }\n\n    private convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        res.body.startdate = res.body.startdate != null ? moment(res.body.startdate) : null;\n        res.body.lastactivedate = res.body.lastactivedate != null ? moment(res.body.lastactivedate) : null;\n        return res;\n    }\n\n    private convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        res.body.forEach((sectionHistory: ISectionHistory) => {\n            sectionHistory.startdate = sectionHistory.startdate != null ? moment(sectionHistory.startdate) : null;\n            sectionHistory.lastactivedate = sectionHistory.lastactivedate != null ? moment(sectionHistory.lastactivedate) : null;\n        });\n        return res;\n    }\n}\n"]}]}