{"remainingRequest":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js??ref--10-2!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js??ref--10-3!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/cart/cart.service.ts","dependencies":[{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/cart/cart.service.ts","mtime":1546686820000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/cache-loader/dist/cjs.js","mtime":1546694544000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js","mtime":1546694542000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar moment = require(\"moment\");\nvar operators_1 = require(\"rxjs/operators\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar shared_1 = require(\"app/shared\");\nvar CartService = /** @class */ (function () {\n    function CartService(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/carts';\n        this.resourceSearchUrl = app_constants_1.SERVER_API_URL + 'api/_search/carts';\n        this.resourceCheckUrl = app_constants_1.SERVER_API_URL + 'api/check/carts';\n        this.resourceAmountUrl = app_constants_1.SERVER_API_URL + 'api/amount/carts';\n        this.resourceCheckoutUrl = app_constants_1.SERVER_API_URL + 'api/checkout/carts';\n        this.resourcePointUrl = app_constants_1.SERVER_API_URL + 'api/points/carts';\n        this.resourceCustomerUrl = app_constants_1.SERVER_API_URL + 'api/all/carts';\n    }\n    CartService.prototype.create = function (cart) {\n        var _this = this;\n        var copy = this.convertDateFromClient(cart);\n        return this.http\n            .post(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    CartService.prototype.update = function (cart) {\n        var _this = this;\n        var copy = this.convertDateFromClient(cart);\n        return this.http\n            .put(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    CartService.prototype.subamount = function (id, amt) {\n        /**const params = new HttpParams()\n         .set('amount', String(amount));*/\n        this.http\n            .put(this.resourceAmountUrl + \"/\" + id, {\n            amount: amt\n        })\n            .subscribe(function (data) {\n            console.log('PUT Request is successful ', data);\n        }, function (error) {\n            console.log('Error', error);\n        });\n    };\n    CartService.prototype.checkout = function (id) {\n        /**const params = new HttpParams()\n         .set('amount', String(amount));*/\n        this.http.get(this.resourceCheckoutUrl + \"/\" + id).subscribe(function (data) {\n            console.log('PUT Request is successful ', data);\n        }, function (error) {\n            console.log('Error', error);\n        });\n    };\n    CartService.prototype.subpoints = function (id, pts) {\n        this.http\n            .put(this.resourcePointUrl + \"/\" + id, {\n            point: pts\n        })\n            .subscribe(function (data) {\n            console.log('PUT Request is successful ', data);\n        }, function (error) {\n            console.log('Error', error);\n        });\n    };\n    CartService.prototype.find = function (id) {\n        var _this = this;\n        return this.http\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    CartService.prototype.check = function (id) {\n        return this.http.get(this.resourceCheckUrl + \"/\" + id);\n    };\n    CartService.prototype.getcustomer = function (id) {\n        var _this = this;\n        return this.http.get(app_constants_1.SERVER_API_URL + 'api/all/carts' + \"/\" + id, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    CartService.prototype.query = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    CartService.prototype.delete = function (id) {\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\n    };\n    CartService.prototype.search = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    CartService.prototype.convertDateFromClient = function (cart) {\n        var copy = Object.assign({}, cart, {\n            createddate: cart.createddate != null && cart.createddate.isValid() ? cart.createddate.toJSON() : null,\n            lastactivedate: cart.lastactivedate != null && cart.lastactivedate.isValid() ? cart.lastactivedate.toJSON() : null\n        });\n        return copy;\n    };\n    CartService.prototype.convertDateFromServer = function (res) {\n        res.body.createddate = res.body.createddate != null ? moment(res.body.createddate) : null;\n        res.body.lastactivedate = res.body.lastactivedate != null ? moment(res.body.lastactivedate) : null;\n        return res;\n    };\n    CartService.prototype.convertDateArrayFromServer = function (res) {\n        res.body.forEach(function (cart) {\n            cart.createddate = cart.createddate != null ? moment(cart.createddate) : null;\n            cart.lastactivedate = cart.lastactivedate != null ? moment(cart.lastactivedate) : null;\n        });\n        return res;\n    };\n    CartService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], CartService);\n    return CartService;\n    var _a;\n}());\nexports.CartService = CartService;\n",{"version":3,"file":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/cart/cart.service.ts","sourceRoot":"","sources":["/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/cart/cart.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as moment from 'moment';\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared';\nimport { ICart } from 'app/shared/model/cart.model';\nimport { ICustomer } from 'app/shared/model/customer.model';\n\ntype EntityResponseType = HttpResponse<ICart>;\ntype EntityArrayResponseType = HttpResponse<ICart[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class CartService {\n    private resourceUrl = SERVER_API_URL + 'api/carts';\n    private resourceSearchUrl = SERVER_API_URL + 'api/_search/carts';\n    private resourceCheckUrl = SERVER_API_URL + 'api/check/carts';\n    private resourceAmountUrl = SERVER_API_URL + 'api/amount/carts';\n    private resourceCheckoutUrl = SERVER_API_URL + 'api/checkout/carts';\n    private resourcePointUrl = SERVER_API_URL + 'api/points/carts';\n    private resourceCustomerUrl = SERVER_API_URL + 'api/all/carts';\n\n    constructor(private http: HttpClient) {}\n\n    create(cart: ICart): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(cart);\n        return this.http\n            .post<ICart>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(cart: ICart): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(cart);\n        return this.http\n            .put<ICart>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    subamount(id: number, amt: number) {\n        /**const params = new HttpParams()\n         .set('amount', String(amount));*/\n        this.http\n            .put(`${this.resourceAmountUrl}/${id}`, {\n                amount: amt\n            })\n            .subscribe(\n                data => {\n                    console.log('PUT Request is successful ', data);\n                },\n                error => {\n                    console.log('Error', error);\n                }\n            );\n    }\n\n    checkout(id: number) {\n        /**const params = new HttpParams()\n         .set('amount', String(amount));*/\n        this.http.get(`${this.resourceCheckoutUrl}/${id}`).subscribe(\n            data => {\n                console.log('PUT Request is successful ', data);\n            },\n            error => {\n                console.log('Error', error);\n            }\n        );\n    }\n\n    subpoints(id: number, pts: number) {\n        this.http\n            .put(`${this.resourcePointUrl}/${id}`, {\n                point: pts\n            })\n            .subscribe(\n                data => {\n                    console.log('PUT Request is successful ', data);\n                },\n                error => {\n                    console.log('Error', error);\n                }\n            );\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<ICart>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    check(id: number): Observable<ICart> {\n        return this.http.get<ICart>(`${this.resourceCheckUrl}/${id}`);\n    }\n\n    getcustomer(id: number): Observable<EntityArrayResponseType> {\n        return this.http.get<ICart[]>(`${SERVER_API_URL + 'api/all/carts'}/${id}`, { observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ICart[]>(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n    }\n\n    search(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ICart[]>(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    private convertDateFromClient(cart: ICart): ICart {\n        const copy: ICart = Object.assign({}, cart, {\n            createddate: cart.createddate != null && cart.createddate.isValid() ? cart.createddate.toJSON() : null,\n            lastactivedate: cart.lastactivedate != null && cart.lastactivedate.isValid() ? cart.lastactivedate.toJSON() : null\n        });\n        return copy;\n    }\n\n    private convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        res.body.createddate = res.body.createddate != null ? moment(res.body.createddate) : null;\n        res.body.lastactivedate = res.body.lastactivedate != null ? moment(res.body.lastactivedate) : null;\n        return res;\n    }\n\n    private convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        res.body.forEach((cart: ICart) => {\n            cart.createddate = cart.createddate != null ? moment(cart.createddate) : null;\n            cart.lastactivedate = cart.lastactivedate != null ? moment(cart.lastactivedate) : null;\n        });\n        return res;\n    }\n}\n"]}]}