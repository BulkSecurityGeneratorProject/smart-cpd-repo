{"remainingRequest":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js??ref--10-2!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js??ref--10-3!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/orders/orders.service.ts","dependencies":[{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/orders/orders.service.ts","mtime":1546686984000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/cache-loader/dist/cjs.js","mtime":1546694544000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js","mtime":1546694542000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar moment = require(\"moment\");\nvar operators_1 = require(\"rxjs/operators\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar shared_1 = require(\"app/shared\");\nvar OrdersService = /** @class */ (function () {\n    function OrdersService(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/orders';\n        this.resourceSearchUrl = app_constants_1.SERVER_API_URL + 'api/_search/orders';\n        this.resourceOrderCartUrl = app_constants_1.SERVER_API_URL + 'api/cart/order';\n    }\n    OrdersService.prototype.create = function (orders) {\n        var _this = this;\n        var copy = this.convertDateFromClient(orders);\n        return this.http\n            .post(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    OrdersService.prototype.update = function (orders) {\n        var _this = this;\n        var copy = this.convertDateFromClient(orders);\n        return this.http\n            .put(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    OrdersService.prototype.find = function (id) {\n        var _this = this;\n        return this.http\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    OrdersService.prototype.query = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    OrdersService.prototype.delete = function (id) {\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\n    };\n    OrdersService.prototype.search = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    OrdersService.prototype.getoptionalcart = function (id) {\n        return this.http.get(app_constants_1.SERVER_API_URL + 'api/cart/order/optional' + \"/\" + id, { observe: 'response' });\n    };\n    OrdersService.prototype.getsinglecart = function (id) {\n        return this.http.get(this.resourceOrderCartUrl + \"/\" + id);\n    };\n    OrdersService.prototype.convertDateFromClient = function (orders) {\n        var copy = Object.assign({}, orders, {\n            createddate: orders.createddate != null && orders.createddate.isValid() ? orders.createddate.toJSON() : null\n        });\n        return copy;\n    };\n    OrdersService.prototype.convertDateFromServer = function (res) {\n        res.body.createddate = res.body.createddate != null ? moment(res.body.createddate) : null;\n        return res;\n    };\n    OrdersService.prototype.convertDateArrayFromServer = function (res) {\n        res.body.forEach(function (orders) {\n            orders.createddate = orders.createddate != null ? moment(orders.createddate) : null;\n        });\n        return res;\n    };\n    OrdersService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], OrdersService);\n    return OrdersService;\n    var _a;\n}());\nexports.OrdersService = OrdersService;\n",{"version":3,"file":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/orders/orders.service.ts","sourceRoot":"","sources":["/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/orders/orders.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as moment from 'moment';\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared';\nimport { IOrders } from 'app/shared/model/orders.model';\nimport { ICart } from 'app/shared/model/cart.model';\n\ntype EntityResponseType = HttpResponse<IOrders>;\ntype EntityArrayResponseType = HttpResponse<IOrders[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class OrdersService {\n    private resourceUrl = SERVER_API_URL + 'api/orders';\n    private resourceSearchUrl = SERVER_API_URL + 'api/_search/orders';\n    private resourceOrderCartUrl = SERVER_API_URL + 'api/cart/order';\n\n    constructor(private http: HttpClient) {}\n\n    create(orders: IOrders): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(orders);\n        return this.http\n            .post<IOrders>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(orders: IOrders): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(orders);\n        return this.http\n            .put<IOrders>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<IOrders>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<IOrders[]>(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n    }\n\n    search(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<IOrders[]>(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    getoptionalcart(id: number): Observable<HttpResponse<IOrders>> {\n        return this.http.get<IOrders>(`${SERVER_API_URL + 'api/cart/order/optional'}/${id}`, {observe: 'response'});\n    }\n\n    getsinglecart(id: number): Observable<IOrders> {\n        return this.http.get<IOrders>(`${this.resourceOrderCartUrl}/${id}`);\n    }\n\n    private convertDateFromClient(orders: IOrders): IOrders {\n        const copy: IOrders = Object.assign({}, orders, {\n            createddate: orders.createddate != null && orders.createddate.isValid() ? orders.createddate.toJSON() : null\n        });\n        return copy;\n    }\n\n    private convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        res.body.createddate = res.body.createddate != null ? moment(res.body.createddate) : null;\n        return res;\n    }\n\n    private convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        res.body.forEach((orders: IOrders) => {\n            orders.createddate = orders.createddate != null ? moment(orders.createddate) : null;\n        });\n        return res;\n    }\n}\n"]}]}