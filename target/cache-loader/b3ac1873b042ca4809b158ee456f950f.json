{"remainingRequest":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js??ref--10-2!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js??ref--10-3!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/customer/customer.service.ts","dependencies":[{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/customer/customer.service.ts","mtime":1546676136000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/cache-loader/dist/cjs.js","mtime":1546694544000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js","mtime":1546694542000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar moment = require(\"moment\");\nvar operators_1 = require(\"rxjs/operators\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar shared_1 = require(\"app/shared\");\nvar CustomerService = /** @class */ (function () {\n    function CustomerService(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/customers';\n        this.resourceSearchUrl = app_constants_1.SERVER_API_URL + 'api/_search/customers';\n        this.resourceUserUrl = app_constants_1.SERVER_API_URL + 'api/user/customers';\n    }\n    CustomerService.prototype.create = function (customer) {\n        var _this = this;\n        var copy = this.convertDateFromClient(customer);\n        return this.http\n            .post(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    CustomerService.prototype.update = function (customer) {\n        var _this = this;\n        var copy = this.convertDateFromClient(customer);\n        return this.http\n            .put(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    CustomerService.prototype.find = function (id) {\n        var _this = this;\n        return this.http\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    CustomerService.prototype.getuser = function (id) {\n        return this.http.get(this.resourceUserUrl + \"/\" + id);\n    };\n    CustomerService.prototype.query = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    CustomerService.prototype.delete = function (id) {\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\n    };\n    CustomerService.prototype.search = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    CustomerService.prototype.convertDateFromClient = function (customer) {\n        var copy = Object.assign({}, customer, {\n            registered: customer.registered != null && customer.registered.isValid() ? customer.registered.toJSON() : null,\n            lastactive: customer.lastactive != null && customer.lastactive.isValid() ? customer.lastactive.toJSON() : null,\n            cycledate: customer.cycledate != null && customer.cycledate.isValid() ? customer.cycledate.toJSON() : null\n        });\n        return copy;\n    };\n    CustomerService.prototype.convertDateFromServer = function (res) {\n        res.body.registered = res.body.registered != null ? moment(res.body.registered) : null;\n        res.body.lastactive = res.body.lastactive != null ? moment(res.body.lastactive) : null;\n        res.body.cycledate = res.body.cycledate != null ? moment(res.body.cycledate) : null;\n        return res;\n    };\n    CustomerService.prototype.convertDateArrayFromServer = function (res) {\n        res.body.forEach(function (customer) {\n            customer.registered = customer.registered != null ? moment(customer.registered) : null;\n            customer.lastactive = customer.lastactive != null ? moment(customer.lastactive) : null;\n            customer.cycledate = customer.cycledate != null ? moment(customer.cycledate) : null;\n        });\n        return res;\n    };\n    CustomerService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], CustomerService);\n    return CustomerService;\n    var _a;\n}());\nexports.CustomerService = CustomerService;\n",{"version":3,"file":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/customer/customer.service.ts","sourceRoot":"","sources":["/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/customer/customer.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as moment from 'moment';\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared';\nimport { ICustomer } from 'app/shared/model/customer.model';\n\ntype EntityResponseType = HttpResponse<ICustomer>;\ntype EntityArrayResponseType = HttpResponse<ICustomer[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerService {\n    private resourceUrl = SERVER_API_URL + 'api/customers';\n    private resourceSearchUrl = SERVER_API_URL + 'api/_search/customers';\n    private resourceUserUrl = SERVER_API_URL + 'api/user/customers';\n\n    constructor(private http: HttpClient) {}\n\n    create(customer: ICustomer): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(customer);\n        return this.http\n            .post<ICustomer>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(customer: ICustomer): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(customer);\n        return this.http\n            .put<ICustomer>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<ICustomer>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    getuser(id: number): Observable<ICustomer> {\n        return this.http.get<ICustomer>(`${this.resourceUserUrl}/${id}`);\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ICustomer[]>(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n    }\n\n    search(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ICustomer[]>(this.resourceSearchUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    private convertDateFromClient(customer: ICustomer): ICustomer {\n        const copy: ICustomer = Object.assign({}, customer, {\n            registered: customer.registered != null && customer.registered.isValid() ? customer.registered.toJSON() : null,\n            lastactive: customer.lastactive != null && customer.lastactive.isValid() ? customer.lastactive.toJSON() : null,\n            cycledate: customer.cycledate != null && customer.cycledate.isValid() ? customer.cycledate.toJSON() : null\n        });\n        return copy;\n    }\n\n    private convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        res.body.registered = res.body.registered != null ? moment(res.body.registered) : null;\n        res.body.lastactive = res.body.lastactive != null ? moment(res.body.lastactive) : null;\n        res.body.cycledate = res.body.cycledate != null ? moment(res.body.cycledate) : null;\n        return res;\n    }\n\n    private convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        res.body.forEach((customer: ICustomer) => {\n            customer.registered = customer.registered != null ? moment(customer.registered) : null;\n            customer.lastactive = customer.lastactive != null ? moment(customer.lastactive) : null;\n            customer.cycledate = customer.cycledate != null ? moment(customer.cycledate) : null;\n        });\n        return res;\n    }\n}\n"]}]}