{"remainingRequest":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js??ref--10-2!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js??ref--10-3!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/checkout/checkout.component.ts","dependencies":[{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/checkout/checkout.component.ts","mtime":1546463906000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/cache-loader/dist/cjs.js","mtime":1546694544000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js","mtime":1546694542000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar router_1 = require(\"@angular/router\");\nvar ng_jhipster_1 = require(\"ng-jhipster\");\nvar core_2 = require(\"app/core\");\nvar course_1 = require(\"app/entities/course\");\nvar customer_1 = require(\"app/entities/customer\");\nvar cart_1 = require(\"app/entities/cart\");\nvar course_cart_bridge_1 = require(\"app/entities/course-cart-bridge\");\nvar navbar_service_1 = require(\"app/layouts/navbar/navbar.service\");\nvar orders_1 = require(\"app/entities/orders\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar CheckoutComponent = /** @class */ (function () {\n    function CheckoutComponent(jhiAlertService, eventManager, activatedRoute, principal, courseService, customerService, cartService, courseCartService, userService, navbarService, http, orderService, router) {\n        this.jhiAlertService = jhiAlertService;\n        this.eventManager = eventManager;\n        this.activatedRoute = activatedRoute;\n        this.principal = principal;\n        this.courseService = courseService;\n        this.customerService = customerService;\n        this.cartService = cartService;\n        this.courseCartService = courseCartService;\n        this.userService = userService;\n        this.navbarService = navbarService;\n        this.http = http;\n        this.orderService = orderService;\n        this.router = router;\n        this.courseNumber = 0;\n        this.userID = 0;\n        this.amount = 0;\n        this.points = 0;\n        this.tax = 0;\n        this.gross = 0;\n        this.tempCustPoints = 0;\n        this.flag = false;\n        this.transactionError = '';\n        this.redeemPointsText = 'Redeem Points';\n        this.redeemApprPts = 0;\n        this.bridgeCart = [];\n    }\n    CheckoutComponent.prototype.chargeCreditCard = function () {\n        var _this = this;\n        this.transactionError = '';\n        var form = document.getElementsByTagName('form')[0];\n        window.Stripe.card.createToken({\n            number: form.cardNumber.value,\n            exp_month: form.expMonth.value,\n            exp_year: form.expYear.value,\n            cvc: form.cvc.value\n        }, function (status, response) {\n            if (status === 200) {\n                var token = response.id;\n                console.log('tokenInit:' + token);\n                _this.chargeCard(token);\n            }\n            else {\n                _this.transactionError = response.error.message;\n                console.log(response.error.message);\n            }\n        });\n    };\n    CheckoutComponent.prototype.redeemPts = function () {\n        if (this.customer.points <= this.redeempoints) {\n            this.redeemApprPts = this.redeempoints;\n            this.redeempoints = 0;\n            this.redeemPointsText = 'Reedeemed! Points Adjusted';\n        }\n        else {\n            this.redeempoints = 0;\n            this.redeemPointsText = 'Not Enough Points';\n        }\n    };\n    CheckoutComponent.prototype.chargeCard = function (token) {\n        var _this = this;\n        var tokenStr = token;\n        var headers = new http_1.HttpHeaders({\n            token: tokenStr,\n            amount: String(this.gross),\n            cartId: String(this.cart.id),\n            redeem: String(this.redeemApprPts),\n            buypoints: String(this.points)\n        });\n        console.log('token:' + token);\n        console.log('amount' + String(this.gross));\n        this.http.post(app_constants_1.SERVER_API_URL + 'api/carts/charge', {}, { headers: headers }).subscribe(function (resp) {\n            var status = resp['status'];\n            var payId = resp['id'];\n            console.log(resp['source.brand']);\n            console.log(resp['outcome.network_status']);\n            console.log(resp['destination']);\n            console.log(status);\n            if (status === 'succeeded') {\n                _this.transactionError = 'Order has been completed, payment [' + payId + '] has been accepted.';\n                var resourceCheckoutUrl = app_constants_1.SERVER_API_URL + 'api/checkout/carts';\n                _this.orderService.getsinglecart(_this.cart.id).subscribe(function (order) {\n                    var newOrder = order;\n                    newOrder.card_type = resp['source.brand'];\n                    newOrder.last4 = resp['source.last4'];\n                    newOrder.network_status = resp['outcome.network_status'];\n                    newOrder.seller_message = resp['outcome.seller_message'];\n                    newOrder.seller_type = resp['destination'];\n                    _this.orderService.update(newOrder);\n                });\n                setTimeout(function () {\n                    _this.initialize();\n                    _this.router.navigateByUrl(app_constants_1.SERVER_API_URL + 'dashboards');\n                }, 5000);\n            }\n            else if (status === 'pending') {\n                _this.transactionError = 'Order is under process, payment [' + payId + '] is pending.';\n                var resourceCheckoutUrl = app_constants_1.SERVER_API_URL + 'api/checkout/carts';\n                _this.orderService.getsinglecart(_this.cart.id).subscribe(function (order) {\n                    var newOrder = order;\n                    newOrder.card_type = resp['source.brand'];\n                    newOrder.last4 = resp['source.last4'];\n                    newOrder.network_status = resp['outcome.network_status'];\n                    newOrder.seller_message = resp['outcome.seller_message'];\n                    newOrder.seller_type = resp['destination'];\n                    _this.orderService.update(newOrder);\n                });\n                setTimeout(function () {\n                    _this.initialize();\n                    _this.router.navigateByUrl(app_constants_1.SERVER_API_URL + 'dashboards');\n                }, 5000);\n            }\n        });\n    };\n    CheckoutComponent.prototype.removeCourse = function (instance) {\n        var _this = this;\n        var resourceChangeUrl = 'http://localhost:9000/api/change/carts';\n        this.http.put(resourceChangeUrl + \"/\" + this.cart.id + \"?identifier=\" + instance.course.id, {}).subscribe(function (data) {\n            console.log('PUT Request is successful ', data);\n        }, function (error) {\n            console.log('Error', error);\n        });\n        this.courseCartService.delete(instance.id).subscribe(function () {\n            _this.courseCartService.getcollection(_this.cart.id).subscribe(function (bridges) {\n                _this.amount -= instance.course.amount;\n                _this.points -= instance.course.point;\n                _this.tax = _this.amount * 0.05;\n                _this.gross = _this.amount + _this.tax;\n                _this.displayAchievementPoint();\n                _this.bridgeCart = bridges;\n                if (_this.cart.checkout) {\n                    _this.courseNumber = 0;\n                }\n                else {\n                    _this.courseNumber = _this.bridgeCart.length;\n                }\n                _this.navbarService.shouldCheck();\n            });\n        });\n        this.navbarService.shouldCheck();\n    };\n    /**processPayment() {\n        const resourceCheckoutUrl = SERVER_API_URL + 'api/checkout/carts';\n        this.http.get(`${resourceCheckoutUrl}/${this.cart.id}`).subscribe(\n            () => {\n                const newOrder: IOrders = {};\n                newOrder.cart = this.cart;\n                newOrder.createddate = moment();\n                newOrder.payment = PAYMENT.PAYPAL;\n                newOrder.status = NOTIFICATIONS.ORDERPROCESSING;\n                newOrder.amount = this.cart.amount;\n                this.subscribeToSaveResponseOrder(this.orderService.create(newOrder));\n                this.initialize();\n            },\n            error => {\n                console.log('Error', error);\n            }\n        );\n    }*/\n    CheckoutComponent.prototype.initialize = function () {\n        this.amount = 0;\n        this.points = 0;\n        this.tax = this.amount * 0.05;\n        this.gross = this.amount + this.tax;\n        this.displayAchievementPoint();\n        this.bridgeCart = null;\n        this.transactionError = '';\n        this.navbarService.initialize();\n    };\n    CheckoutComponent.prototype.subscribeToSaveResponseOrder = function (result) {\n        var _this = this;\n        result.subscribe(function (res) { return _this.onSaveSuccess(); }, function (res) { return _this.onSaveError(); });\n    };\n    CheckoutComponent.prototype.subscribeToSaveResponseCart = function (result) {\n        var _this = this;\n        result.subscribe(function (res) { return _this.onSaveSuccess(); }, function (res) { return _this.onSaveError(); });\n    };\n    CheckoutComponent.prototype.subscribeToSaveResponse = function (result) {\n        var _this = this;\n        result.subscribe(function (res) { return _this.onSaveSuccess(); }, function (res) { return _this.onSaveError(); });\n    };\n    CheckoutComponent.prototype.onSaveSuccess = function () {\n        this.isSaving = false;\n    };\n    CheckoutComponent.prototype.onSaveError = function () {\n        this.isSaving = false;\n    };\n    CheckoutComponent.prototype.displayAchievementPoint = function () {\n        return this.customer.points;\n    };\n    /**ngDoCheck() {\n        this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n            this.bridgeCart = bridges;\n            if (this.bridgeCart.length !== this.courseNumber) {\n                this.ngOnInit();\n            }\n        });\n    }*/\n    /**ngDoCheck() {\n        this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n            this.bridgeCart = bridges;\n            if (this.bridgeCart.length !== this.courseNumber) {\n                this.ngOnInit();\n            }\n        });\n    }*/\n    CheckoutComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.principal.identity().then(function (account) {\n            _this.currentAccount = account;\n            _this.userService.getemail(account.email).subscribe(function (users) {\n                _this.userID = users;\n                _this.customerService.getuser(_this.userID).subscribe(function (customer) {\n                    _this.customer = customer;\n                    _this.tempCustPoints = _this.customer.points;\n                    _this.cartService.check(_this.customer.id).subscribe(function (carts) {\n                        _this.cart = carts;\n                        _this.courseCartService.getcollection(_this.cart.id).subscribe(function (bridges) {\n                            _this.bridgeCart = bridges;\n                            if (_this.cart.checkout) {\n                                _this.courseNumber = 0;\n                            }\n                            else {\n                                _this.courseNumber = _this.bridgeCart.length;\n                            }\n                            for (var i = 0; i < _this.bridgeCart.length; i++) {\n                                _this.amount += _this.bridgeCart[i].course.amount;\n                                _this.points += _this.bridgeCart[i].course.point;\n                            }\n                            _this.tax = _this.amount * 0.05;\n                            _this.gross = _this.amount + _this.tax - _this.redeemApprPts;\n                            _this.displayAchievementPoint();\n                        });\n                    });\n                });\n            });\n        });\n    };\n    CheckoutComponent.prototype.ngOnDestroy = function () { };\n    CheckoutComponent.prototype.trackId = function (index, item) {\n        return item.id;\n    };\n    CheckoutComponent.prototype.onError = function (errorMessage) {\n        this.jhiAlertService.error(errorMessage, null, null);\n    };\n    CheckoutComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-checkout',\n            templateUrl: './checkout.component.html'\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_jhipster_1.JhiAlertService !== \"undefined\" && ng_jhipster_1.JhiAlertService) === \"function\" && _a || Object, typeof (_b = typeof ng_jhipster_1.JhiEventManager !== \"undefined\" && ng_jhipster_1.JhiEventManager) === \"function\" && _b || Object, typeof (_c = typeof router_1.ActivatedRoute !== \"undefined\" && router_1.ActivatedRoute) === \"function\" && _c || Object, typeof (_d = typeof core_2.Principal !== \"undefined\" && core_2.Principal) === \"function\" && _d || Object, typeof (_e = typeof course_1.CourseService !== \"undefined\" && course_1.CourseService) === \"function\" && _e || Object, typeof (_f = typeof customer_1.CustomerService !== \"undefined\" && customer_1.CustomerService) === \"function\" && _f || Object, typeof (_g = typeof cart_1.CartService !== \"undefined\" && cart_1.CartService) === \"function\" && _g || Object, typeof (_h = typeof course_cart_bridge_1.CourseCartBridgeService !== \"undefined\" && course_cart_bridge_1.CourseCartBridgeService) === \"function\" && _h || Object, typeof (_j = typeof core_2.UserService !== \"undefined\" && core_2.UserService) === \"function\" && _j || Object, typeof (_k = typeof navbar_service_1.NavbarService !== \"undefined\" && navbar_service_1.NavbarService) === \"function\" && _k || Object, typeof (_l = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _l || Object, typeof (_m = typeof orders_1.OrdersService !== \"undefined\" && orders_1.OrdersService) === \"function\" && _m || Object, typeof (_o = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" && _o || Object])\n    ], CheckoutComponent);\n    return CheckoutComponent;\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n}());\nexports.CheckoutComponent = CheckoutComponent;\n",{"version":3,"file":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/checkout/checkout.component.ts","sourceRoot":"","sources":["/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/entities/checkout/checkout.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { JhiAlertService, JhiEventManager } from 'ng-jhipster';\nimport { ICheckout } from 'app/shared/model/checkout.model';\nimport { IUser, Principal, UserService } from 'app/core';\nimport { CourseService } from 'app/entities/course';\nimport { CustomerService } from 'app/entities/customer';\nimport { CartService } from 'app/entities/cart';\nimport { CourseCartBridgeService } from 'app/entities/course-cart-bridge';\nimport { ICustomer } from 'app/shared/model/customer.model';\nimport { ICart } from 'app/shared/model/cart.model';\nimport { ICourseCartBridge } from 'app/shared/model/course-cart-bridge.model';\nimport { NavbarService } from 'app/layouts/navbar/navbar.service';\nimport { IOrders, NOTIFICATIONS, PAYMENT } from 'app/shared/model/orders.model';\nimport { OrdersService } from 'app/entities/orders';\nimport * as moment from 'moment';\nimport { now } from 'moment';\nimport { DATE_TIME_FORMAT } from 'app/shared';\nimport { SERVER_API_URL } from 'app/app.constants';\n// import { StripeService, StripeCardComponent, ElementOptions, ElementsOptions } from 'ngx-stripe';\nimport { StripeService, Elements, Element as StripeElement, ElementsOptions } from 'ngx-stripe';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'jhi-checkout',\n    templateUrl: './checkout.component.html'\n})\nexport class CheckoutComponent implements OnInit, OnDestroy {\n    checkouts: ICheckout[];\n    currentAccount: any;\n    eventSubscriber: Subscription;\n    currentSearch: string;\n    courseNumber = 0;\n    user: IUser;\n    userID = 0;\n    customer: ICustomer;\n    cart: ICart;\n    amount = 0;\n    points = 0;\n    tax = 0;\n    gross = 0;\n    bridgeCart: ICourseCartBridge[];\n    tempCustPoints = 0;\n    tempCart: ICart;\n    flag = false;\n    isSaving: boolean;\n    transactionError = '';\n    redeemPointsText = 'Redeem Points';\n    redeempoints: number;\n    redeemApprPts = 0;\n    constructor(\n        private jhiAlertService: JhiAlertService,\n        private eventManager: JhiEventManager,\n        private activatedRoute: ActivatedRoute,\n        private principal: Principal,\n        private courseService: CourseService,\n        private customerService: CustomerService,\n        private cartService: CartService,\n        private courseCartService: CourseCartBridgeService,\n        private userService: UserService,\n        private navbarService: NavbarService,\n        private http: HttpClient,\n        private orderService: OrdersService,\n        private router: Router\n    ) {\n        this.bridgeCart = [];\n    }\n\n    chargeCreditCard() {\n        this.transactionError = '';\n        const form = document.getElementsByTagName('form')[0];\n        (<any>window).Stripe.card.createToken(\n            {\n                number: form.cardNumber.value,\n                exp_month: form.expMonth.value,\n                exp_year: form.expYear.value,\n                cvc: form.cvc.value\n            },\n            (status: number, response: any) => {\n                if (status === 200) {\n                    const token = response.id;\n                    console.log('tokenInit:' + token);\n                    this.chargeCard(token);\n                } else {\n                    this.transactionError = response.error.message;\n                    console.log(response.error.message);\n                }\n            }\n        );\n    }\n\n    public redeemPts() {\n        if (this.customer.points <= this.redeempoints) {\n            this.redeemApprPts = this.redeempoints;\n            this.redeempoints = 0;\n            this.redeemPointsText = 'Reedeemed! Points Adjusted';\n        } else {\n            this.redeempoints = 0;\n            this.redeemPointsText = 'Not Enough Points';\n        }\n    }\n\n    chargeCard(token: string) {\n        const tokenStr: string = token;\n        const headers = new HttpHeaders({\n            token: tokenStr,\n            amount: String(this.gross),\n            cartId: String(this.cart.id),\n            redeem: String(this.redeemApprPts),\n            buypoints: String(this.points)\n        });\n        console.log('token:' + token);\n        console.log('amount' + String(this.gross));\n        this.http.post(SERVER_API_URL + 'api/carts/charge', {}, { headers }).subscribe(resp => {\n            const status: string = resp['status'];\n            const payId: string = resp['id'];\n            console.log(resp['source.brand']);\n            console.log(resp['outcome.network_status']);\n            console.log(resp['destination']);\n            console.log(status);\n            if (status === 'succeeded') {\n                this.transactionError = 'Order has been completed, payment [' + payId + '] has been accepted.';\n                const resourceCheckoutUrl = SERVER_API_URL + 'api/checkout/carts';\n                this.orderService.getsinglecart(this.cart.id).subscribe(order => {\n                    const newOrder: IOrders = order;\n                    newOrder.card_type = resp['source.brand'];\n                    newOrder.last4 = resp['source.last4'];\n                    newOrder.network_status = resp['outcome.network_status'];\n                    newOrder.seller_message = resp['outcome.seller_message'];\n                    newOrder.seller_type = resp['destination'];\n                    this.orderService.update(newOrder);\n                });\n                setTimeout(() => {\n                    this.initialize();\n                    this.router.navigateByUrl(SERVER_API_URL + 'dashboards');\n                    }, 5000);\n            } else if (status === 'pending') {\n                this.transactionError = 'Order is under process, payment [' + payId + '] is pending.';\n                const resourceCheckoutUrl = SERVER_API_URL + 'api/checkout/carts';\n                this.orderService.getsinglecart(this.cart.id).subscribe(order => {\n                    const newOrder: IOrders = order;\n                    newOrder.card_type = resp['source.brand'];\n                    newOrder.last4 = resp['source.last4'];\n                    newOrder.network_status = resp['outcome.network_status'];\n                    newOrder.seller_message = resp['outcome.seller_message'];\n                    newOrder.seller_type = resp['destination'];\n                    this.orderService.update(newOrder);\n                });\n                setTimeout(() => {\n                    this.initialize();\n                    this.router.navigateByUrl(SERVER_API_URL + 'dashboards');\n                    }, 5000);\n            }\n        });\n    }\n\n    public removeCourse(instance: ICourseCartBridge) {\n        const resourceChangeUrl = 'http://localhost:9000/api/change/carts';\n        this.http.put(`${resourceChangeUrl}/${this.cart.id}?identifier=` + instance.course.id, {}).subscribe(\n            data => {\n                console.log('PUT Request is successful ', data);\n            },\n            error => {\n                console.log('Error', error);\n            }\n        );\n        this.courseCartService.delete(instance.id).subscribe(() => {\n            this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n                this.amount -= instance.course.amount;\n                this.points -= instance.course.point;\n                this.tax = this.amount * 0.05;\n                this.gross = this.amount + this.tax;\n                this.displayAchievementPoint();\n                this.bridgeCart = bridges;\n                if (this.cart.checkout) {\n                    this.courseNumber = 0;\n                } else {\n                    this.courseNumber = this.bridgeCart.length;\n                }\n                this.navbarService.shouldCheck();\n            });\n        });\n        this.navbarService.shouldCheck();\n    }\n\n    /**processPayment() {\n        const resourceCheckoutUrl = SERVER_API_URL + 'api/checkout/carts';\n        this.http.get(`${resourceCheckoutUrl}/${this.cart.id}`).subscribe(\n            () => {\n                const newOrder: IOrders = {};\n                newOrder.cart = this.cart;\n                newOrder.createddate = moment();\n                newOrder.payment = PAYMENT.PAYPAL;\n                newOrder.status = NOTIFICATIONS.ORDERPROCESSING;\n                newOrder.amount = this.cart.amount;\n                this.subscribeToSaveResponseOrder(this.orderService.create(newOrder));\n                this.initialize();\n            },\n            error => {\n                console.log('Error', error);\n            }\n        );\n    }*/\n\n    initialize() {\n        this.amount = 0;\n        this.points = 0;\n        this.tax = this.amount * 0.05;\n        this.gross = this.amount + this.tax;\n        this.displayAchievementPoint();\n        this.bridgeCart = null;\n        this.transactionError = '';\n        this.navbarService.initialize();\n    }\n\n    subscribeToSaveResponseOrder(result: Observable<HttpResponse<IOrders>>) {\n        result.subscribe((res: HttpResponse<IOrders>) => this.onSaveSuccess(), (res: HttpErrorResponse) => this.onSaveError());\n    }\n\n    subscribeToSaveResponseCart(result: Observable<HttpResponse<ICart>>) {\n        result.subscribe((res: HttpResponse<ICart>) => this.onSaveSuccess(), (res: HttpErrorResponse) => this.onSaveError());\n    }\n\n    subscribeToSaveResponse(result: Observable<HttpResponse<ICart>>) {\n        result.subscribe((res: HttpResponse<ICart>) => this.onSaveSuccess(), (res: HttpErrorResponse) => this.onSaveError());\n    }\n\n    onSaveSuccess() {\n        this.isSaving = false;\n    }\n\n    onSaveError() {\n        this.isSaving = false;\n    }\n\n    displayAchievementPoint() {\n        return this.customer.points;\n    }\n\n    /**ngDoCheck() {\n        this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n            this.bridgeCart = bridges;\n            if (this.bridgeCart.length !== this.courseNumber) {\n                this.ngOnInit();\n            }\n        });\n    }*/\n\n    /**ngDoCheck() {\n        this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n            this.bridgeCart = bridges;\n            if (this.bridgeCart.length !== this.courseNumber) {\n                this.ngOnInit();\n            }\n        });\n    }*/\n\n    ngOnInit() {\n        this.principal.identity().then(account => {\n            this.currentAccount = account;\n            this.userService.getemail(account.email).subscribe(users => {\n                this.userID = users;\n                this.customerService.getuser(this.userID).subscribe(customer => {\n                    this.customer = customer;\n                    this.tempCustPoints = this.customer.points;\n                    this.cartService.check(this.customer.id).subscribe(carts => {\n                        this.cart = carts;\n                        this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n                            this.bridgeCart = bridges;\n                            if (this.cart.checkout) {\n                                this.courseNumber = 0;\n                            } else {\n                                this.courseNumber = this.bridgeCart.length;\n                            }\n                            for (let i = 0; i < this.bridgeCart.length; i++) {\n                                this.amount += this.bridgeCart[i].course.amount;\n                                this.points += this.bridgeCart[i].course.point;\n                            }\n                            this.tax = this.amount * 0.05;\n                            this.gross = this.amount + this.tax - this.redeemApprPts;\n                            this.displayAchievementPoint();\n                        });\n                    });\n                });\n            });\n        });\n    }\n    ngOnDestroy() {}\n\n    trackId(index: number, item: ICheckout) {\n        return item.id;\n    }\n\n    private onError(errorMessage: string) {\n        this.jhiAlertService.error(errorMessage, null, null);\n    }\n}\n"]}]}