{"remainingRequest":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js??ref--10-2!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js??ref--10-3!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/account/register/register.component.ts","dependencies":[{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/account/register/register.component.ts","mtime":1546132670000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/cache-loader/dist/cjs.js","mtime":1546694544000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js","mtime":1546694542000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar ng_jhipster_1 = require(\"ng-jhipster\");\nvar router_1 = require(\"@angular/router\");\nvar ng_jhipster_2 = require(\"ng-jhipster\");\nvar shared_1 = require(\"app/shared\");\nvar core_2 = require(\"app/core\");\nvar register_service_1 = require(\"./register.service\");\nvar company_1 = require(\"app/entities/company\");\nvar core_3 = require(\"@agm/core\");\nvar RegisterComponent = /** @class */ (function () {\n    function RegisterComponent(languageService, loginModalService, registerService, elementRef, renderer, companyService, activatedRoute, dataUtils, jhiAlertService, mapsAPILoader, ngZone) {\n        this.languageService = languageService;\n        this.loginModalService = loginModalService;\n        this.registerService = registerService;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.companyService = companyService;\n        this.activatedRoute = activatedRoute;\n        this.dataUtils = dataUtils;\n        this.jhiAlertService = jhiAlertService;\n        this.mapsAPILoader = mapsAPILoader;\n        this.ngZone = ngZone;\n    }\n    RegisterComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.mapsAPILoader.load().then(function () {\n            var autocomplete = new google.maps.places.Autocomplete(_this.searchElement.nativeElement, { types: ['address'] });\n            autocomplete.addListener('place_changed', function () {\n                _this.ngZone.run(function () {\n                    var place = autocomplete.getPlace();\n                    if (place.geometry === undefined || place.geometry === null) {\n                        return;\n                    }\n                    for (var i = 0; i < place.address_components.length; i++) {\n                        var addressType = place.address_components[i].types[0];\n                        switch (addressType) {\n                            case 'street_number':\n                                _this.addr = place.address_components[i].long_name;\n                                break;\n                            case 'route':\n                                _this.addr += ' ' + place.address_components[i].long_name;\n                                break;\n                            case 'locality':\n                                _this.city = place.address_components[i].long_name;\n                                break;\n                            case 'administrative_area_level_1':\n                                _this.state = place.address_components[i].long_name;\n                                break;\n                            case 'country':\n                                _this.country = place.address_components[i].short_name;\n                                break;\n                        }\n                    }\n                });\n            });\n        });\n        this.success = false;\n        this.registerAccount = {};\n        this.companyService.query().subscribe(function (res) {\n            _this.companies = res.body;\n        }, function (res) { return _this.onError(res.message); });\n        this.date = this.registerAccount.company.cycledate;\n    };\n    RegisterComponent.prototype.selectCompany = function (company) {\n        this.date = company.cycledate.toString();\n    };\n    /*\n    setAddress(addrObj) {\n        this.zone.run(() => {\n            this.addr = addrObj;\n            this.addrKeys = Object.keys(addrObj);\n        });\n    }*/\n    /*\n    public handleAddressChange(address: Address) {\n        const array = address.address_components;\n        this.addr = this.extractFromAdress(array, 'street_address');\n        this.country = this.extractFromAdress(array, 'country');\n        this.state = this.extractFromAdress(array, 'administrative_area_level_1');\n        this.city = this.extractFromAdress(array, 'locality');\n        this.postCode = this.extractFromAdress(array, 'postal_code');\n    }*/\n    RegisterComponent.prototype.byteSize = function (field) {\n        return this.dataUtils.byteSize(field);\n    };\n    RegisterComponent.prototype.extractFromAdress = function (components, type) {\n        for (var i = 0; i < components.length; i++) {\n            for (var j = 0; j < components[i].types.length; j++) {\n                if (components[i].types[j] === type) {\n                    return components[i].long_name;\n                }\n            }\n            return '';\n        }\n    };\n    RegisterComponent.prototype.openFile = function (contentType, field) {\n        return this.dataUtils.openFile(contentType, field);\n    };\n    RegisterComponent.prototype.setFileData = function (event, entity, field, isImage) {\n        this.dataUtils.setFileData(event, entity, field, isImage);\n    };\n    RegisterComponent.prototype.previousState = function () {\n        window.history.back();\n    };\n    RegisterComponent.prototype.ngAfterViewInit = function () {\n        this.renderer.invokeElementMethod(this.elementRef.nativeElement.querySelector('#login'), 'focus', []);\n    };\n    RegisterComponent.prototype.register = function () {\n        var _this = this;\n        this.registerAccount.streetaddress = this.addr + ', ' + this.registerAccount.apt;\n        this.registerAccount.city = this.city;\n        this.registerAccount.country = this.country;\n        this.registerAccount.stateProvince = this.state;\n        if (this.registerAccount.password !== this.confirmPassword) {\n            this.doNotMatch = 'ERROR';\n        }\n        else {\n            this.doNotMatch = null;\n            this.error = null;\n            this.errorUserExists = null;\n            this.errorEmailExists = null;\n            this.languageService.getCurrent().then(function (key) {\n                _this.registerAccount.langKey = key;\n                _this.registerService.save(_this.registerAccount).subscribe(function () {\n                    _this.success = true;\n                }, function (response) { return _this.processError(response); });\n            });\n        }\n    };\n    RegisterComponent.prototype.onError = function (errorMessage) {\n        this.jhiAlertService.error(errorMessage, null, null);\n    };\n    RegisterComponent.prototype.onSaveSuccess = function () {\n        this.success = false;\n        this.previousState();\n    };\n    RegisterComponent.prototype.onSaveError = function () {\n        this.success = false;\n    };\n    RegisterComponent.prototype.trackCompanyById = function (index, item) {\n        return item.id;\n    };\n    RegisterComponent.prototype.openLogin = function () {\n        this.modalRef = this.loginModalService.open();\n    };\n    RegisterComponent.prototype.processError = function (response) {\n        this.success = null;\n        if (response.status === 400 && response.error.type === shared_1.LOGIN_ALREADY_USED_TYPE) {\n            this.errorUserExists = 'ERROR';\n        }\n        else if (response.status === 400 && response.error.type === shared_1.EMAIL_ALREADY_USED_TYPE) {\n            this.errorEmailExists = 'ERROR';\n        }\n        else {\n            this.error = 'ERROR';\n        }\n    };\n    tslib_1.__decorate([\n        core_1.ViewChild('search'),\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof core_1.ElementRef !== \"undefined\" && core_1.ElementRef) === \"function\" && _a || Object)\n    ], RegisterComponent.prototype, \"searchElement\", void 0);\n    RegisterComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-register',\n            templateUrl: './register.component.html'\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof ng_jhipster_1.JhiLanguageService !== \"undefined\" && ng_jhipster_1.JhiLanguageService) === \"function\" && _b || Object, typeof (_c = typeof core_2.LoginModalService !== \"undefined\" && core_2.LoginModalService) === \"function\" && _c || Object, typeof (_d = typeof register_service_1.Register !== \"undefined\" && register_service_1.Register) === \"function\" && _d || Object, typeof (_e = typeof core_1.ElementRef !== \"undefined\" && core_1.ElementRef) === \"function\" && _e || Object, typeof (_f = typeof core_1.Renderer !== \"undefined\" && core_1.Renderer) === \"function\" && _f || Object, typeof (_g = typeof company_1.CompanyService !== \"undefined\" && company_1.CompanyService) === \"function\" && _g || Object, typeof (_h = typeof router_1.ActivatedRoute !== \"undefined\" && router_1.ActivatedRoute) === \"function\" && _h || Object, typeof (_j = typeof ng_jhipster_2.JhiDataUtils !== \"undefined\" && ng_jhipster_2.JhiDataUtils) === \"function\" && _j || Object, typeof (_k = typeof ng_jhipster_2.JhiAlertService !== \"undefined\" && ng_jhipster_2.JhiAlertService) === \"function\" && _k || Object, typeof (_l = typeof core_3.MapsAPILoader !== \"undefined\" && core_3.MapsAPILoader) === \"function\" && _l || Object, typeof (_m = typeof core_1.NgZone !== \"undefined\" && core_1.NgZone) === \"function\" && _m || Object])\n    ], RegisterComponent);\n    return RegisterComponent;\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n}());\nexports.RegisterComponent = RegisterComponent;\n",{"version":3,"file":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/account/register/register.component.ts","sourceRoot":"","sources":["/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/account/register/register.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, AfterViewInit, Renderer, ElementRef, ViewChild, NgZone } from '@angular/core';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { JhiLanguageService } from 'ng-jhipster';\nimport { ActivatedRoute } from '@angular/router';\nimport { JhiAlertService, JhiDataUtils } from 'ng-jhipster';\nimport {} from '@types/googlemaps';\n\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from 'app/shared';\nimport { LoginModalService } from 'app/core';\nimport { Register } from './register.service';\nimport { CustomerService } from 'app/entities/customer';\nimport { ICustomer } from 'app/shared/model/customer.model';\nimport { ICompany } from 'app/shared/model/company.model';\nimport { CompanyService } from 'app/entities/company';\nimport { MapsAPILoader } from '@agm/core';\nimport moment = require('moment');\n\n@Component({\n    selector: 'jhi-register',\n    templateUrl: './register.component.html'\n})\nexport class RegisterComponent implements OnInit, AfterViewInit {\n    confirmPassword: string;\n    doNotMatch: string;\n    error: string;\n    errorEmailExists: string;\n    errorUserExists: string;\n    registerAccount: any;\n    success: boolean;\n    modalRef: NgbModalRef;\n    companies: ICompany[];\n    customer: ICustomer;\n    public addr: string;\n    public city: string;\n    public country: string;\n    public state: string;\n    public date: string;\n    @ViewChild('search') public searchElement: ElementRef;\n    constructor(\n        private languageService: JhiLanguageService,\n        private loginModalService: LoginModalService,\n        private registerService: Register,\n        private elementRef: ElementRef,\n        private renderer: Renderer,\n        private companyService: CompanyService,\n        private activatedRoute: ActivatedRoute,\n        private dataUtils: JhiDataUtils,\n        private jhiAlertService: JhiAlertService,\n        private mapsAPILoader: MapsAPILoader,\n        private ngZone: NgZone\n    ) {}\n\n    ngOnInit() {\n        this.mapsAPILoader.load().then(() => {\n            const autocomplete = new google.maps.places.Autocomplete(this.searchElement.nativeElement, { types: ['address'] });\n            autocomplete.addListener('place_changed', () => {\n                this.ngZone.run(() => {\n                    const place: google.maps.places.PlaceResult = autocomplete.getPlace();\n                    if (place.geometry === undefined || place.geometry === null) {\n                        return;\n                    }\n                    for (let i = 0; i < place.address_components.length; i++) {\n                        const addressType = place.address_components[i].types[0];\n                        switch (addressType) {\n                            case 'street_number':\n                                this.addr = place.address_components[i].long_name;\n                                break;\n                            case 'route':\n                                this.addr += ' ' + place.address_components[i].long_name;\n                                break;\n                            case 'locality':\n                                this.city = place.address_components[i].long_name;\n                                break;\n                            case 'administrative_area_level_1':\n                                this.state = place.address_components[i].long_name;\n                                break;\n                            case 'country':\n                                this.country = place.address_components[i].short_name;\n                                break;\n                        }\n                    }\n                });\n            });\n        });\n        this.success = false;\n        this.registerAccount = {};\n        this.companyService.query().subscribe(\n            (res: HttpResponse<ICompany[]>) => {\n                this.companies = res.body;\n            },\n            (res: HttpErrorResponse) => this.onError(res.message)\n        );\n        this.date = this.registerAccount.company.cycledate;\n    }\n\n    selectCompany(company: ICompany) {\n        this.date = company.cycledate.toString();\n    }\n    /*\n    setAddress(addrObj) {\n        this.zone.run(() => {\n            this.addr = addrObj;\n            this.addrKeys = Object.keys(addrObj);\n        });\n    }*/\n    /*\n    public handleAddressChange(address: Address) {\n        const array = address.address_components;\n        this.addr = this.extractFromAdress(array, 'street_address');\n        this.country = this.extractFromAdress(array, 'country');\n        this.state = this.extractFromAdress(array, 'administrative_area_level_1');\n        this.city = this.extractFromAdress(array, 'locality');\n        this.postCode = this.extractFromAdress(array, 'postal_code');\n    }*/\n\n    byteSize(field) {\n        return this.dataUtils.byteSize(field);\n    }\n\n    extractFromAdress(components: any, type: string) {\n        for (let i = 0; i < components.length; i++) {\n            for (let j = 0; j < components[i].types.length; j++) {\n                if (components[i].types[j] === type) {\n                    return components[i].long_name;\n                }\n            }\n            return '';\n        }\n    }\n\n    openFile(contentType, field) {\n        return this.dataUtils.openFile(contentType, field);\n    }\n\n    setFileData(event, entity, field, isImage) {\n        this.dataUtils.setFileData(event, entity, field, isImage);\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    ngAfterViewInit() {\n        this.renderer.invokeElementMethod(this.elementRef.nativeElement.querySelector('#login'), 'focus', []);\n    }\n\n    register() {\n        this.registerAccount.streetaddress = this.addr + ', ' + this.registerAccount.apt;\n        this.registerAccount.city = this.city;\n        this.registerAccount.country = this.country;\n        this.registerAccount.stateProvince = this.state;\n        if (this.registerAccount.password !== this.confirmPassword) {\n            this.doNotMatch = 'ERROR';\n        } else {\n            this.doNotMatch = null;\n            this.error = null;\n            this.errorUserExists = null;\n            this.errorEmailExists = null;\n            this.languageService.getCurrent().then(key => {\n                this.registerAccount.langKey = key;\n                this.registerService.save(this.registerAccount).subscribe(\n                    () => {\n                        this.success = true;\n                    },\n                    response => this.processError(response)\n                );\n            });\n        }\n    }\n\n    private onError(errorMessage: string) {\n        this.jhiAlertService.error(errorMessage, null, null);\n    }\n\n    private onSaveSuccess() {\n        this.success = false;\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.success = false;\n    }\n\n    trackCompanyById(index: number, item: ICompany) {\n        return item.id;\n    }\n\n    openLogin() {\n        this.modalRef = this.loginModalService.open();\n    }\n\n    private processError(response: HttpErrorResponse) {\n        this.success = null;\n        if (response.status === 400 && response.error.type === LOGIN_ALREADY_USED_TYPE) {\n            this.errorUserExists = 'ERROR';\n        } else if (response.status === 400 && response.error.type === EMAIL_ALREADY_USED_TYPE) {\n            this.errorEmailExists = 'ERROR';\n        } else {\n            this.error = 'ERROR';\n        }\n    }\n}\n"]}]}