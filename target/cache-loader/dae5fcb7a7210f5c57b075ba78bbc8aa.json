{"remainingRequest":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js??ref--10-2!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js??ref--10-3!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/layouts/navbar/navbar.component.ts","dependencies":[{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/layouts/navbar/navbar.component.ts","mtime":1546567510000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/cache-loader/dist/cjs.js","mtime":1546694544000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/thread-loader/dist/cjs.js","mtime":1546694542000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar ng_jhipster_1 = require(\"ng-jhipster\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar core_2 = require(\"app/core\");\nvar profile_service_1 = require(\"../profiles/profile.service\");\nvar course_1 = require(\"app/entities/course\");\nvar customer_1 = require(\"app/entities/customer\");\nvar cart_1 = require(\"app/entities/cart\");\nvar course_cart_bridge_1 = require(\"app/entities/course-cart-bridge\");\nvar navbar_service_1 = require(\"app/layouts/navbar/navbar.service\");\nvar setInterval = require(\"core-js/library/fn/set-interval\");\nvar NavbarComponent = /** @class */ (function () {\n    function NavbarComponent(loginService, languageService, languageHelper, loginModalService, profileService, router, principal, courseService, customerService, cartService, courseCartService, userService, navbarService, ref) {\n        this.loginService = loginService;\n        this.languageService = languageService;\n        this.languageHelper = languageHelper;\n        this.loginModalService = loginModalService;\n        this.profileService = profileService;\n        this.router = router;\n        this.principal = principal;\n        this.courseService = courseService;\n        this.customerService = customerService;\n        this.cartService = cartService;\n        this.courseCartService = courseCartService;\n        this.userService = userService;\n        this.navbarService = navbarService;\n        this.ref = ref;\n        this.courseNumber = 0;\n        this.userID = 0;\n        this.flag = false;\n        this.isCourse = false;\n        this.isCheckout = false;\n        this.instanceCnt = 0;\n        this.flagTemp = false;\n        this.version = app_constants_1.VERSION ? 'v' + app_constants_1.VERSION : '';\n        this.isNavbarCollapsed = true;\n        this.bridgeCart = [];\n    }\n    /**ngDoCheck() {\n        this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n            this.bridgeCart = bridges;\n            if (this.bridgeCart.length !== this.courseNumber) {\n                this.ngOnInit();\n            }\n        });\n    }*/\n    /**ngDoCheck() {\n        this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n            this.bridgeCart = bridges;\n            if (this.bridgeCart.length !== this.courseNumber) {\n                this.ngOnInit();\n            }\n        });\n    }*/\n    NavbarComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // this.courseNumber = this.update();\n        this.languageHelper.getAll().then(function (languages) {\n            _this.languages = languages;\n        });\n        this.profileService.getProfileInfo().then(function (profileInfo) {\n            _this.inProduction = profileInfo.inProduction;\n            _this.swaggerEnabled = profileInfo.swaggerEnabled;\n        });\n        setInterval(function () {\n            _this.isCourse = _this.router.url.includes('/course', 0);\n            _this.isCheckout = _this.router.url.includes('/checkout', 0);\n            if ((_this.isCourse || _this.isCheckout) && _this.navbarService.check) {\n                _this.update();\n            }\n        }, 1000);\n        // this.courseNumber = this.navbarService.courses;\n    };\n    NavbarComponent.prototype.update = function () {\n        var _this = this;\n        if (this.courseNumber === 0) {\n            this.principal.identity().then(function (account) {\n                _this.currentAccount = account;\n                _this.userService.getemail(account.email).subscribe(function (users) {\n                    _this.userID = users;\n                    _this.customerService.getuser(_this.userID).subscribe(function (customer) {\n                        _this.customer = customer;\n                        _this.cartService.check(_this.customer.id).subscribe(function (carts) {\n                            _this.cart = carts;\n                            _this.tempCart = _this.cart;\n                            _this.courseCartService.getcollection(_this.cart.id).subscribe(function (bridges) {\n                                _this.bridgeCart = bridges;\n                                if (_this.cart.checkout) {\n                                    _this.courseNumber = 0;\n                                    _this.navbarService.setNum(0);\n                                }\n                                else {\n                                    _this.courseNumber = _this.bridgeCart.length;\n                                    _this.navbarService.setNum(_this.bridgeCart.length);\n                                }\n                            });\n                        });\n                    });\n                });\n            });\n        }\n        else {\n            this.courseCartService.getcollection(this.cart.id).subscribe(function (bridges) {\n                _this.bridgeCart = bridges;\n                if (_this.cart.checkout) {\n                    _this.courseNumber = 0;\n                    _this.navbarService.setNum(0);\n                }\n                else {\n                    _this.courseNumber = _this.bridgeCart.length;\n                    _this.navbarService.setNum(_this.bridgeCart.length);\n                }\n            });\n        }\n        /**else {\n            this.navbarService.reset();\n        }*/\n        this.navbarService.donotCheck();\n    };\n    NavbarComponent.prototype.changeLanguage = function (languageKey) {\n        this.languageService.changeLanguage(languageKey);\n    };\n    NavbarComponent.prototype.collapseNavbar = function () {\n        this.isNavbarCollapsed = true;\n    };\n    NavbarComponent.prototype.isAuthenticated = function () {\n        return this.principal.isAuthenticated();\n    };\n    NavbarComponent.prototype.login = function () {\n        this.modalRef = this.loginModalService.open();\n    };\n    NavbarComponent.prototype.logout = function () {\n        this.collapseNavbar();\n        this.loginService.logout();\n        this.router.navigate(['']);\n    };\n    NavbarComponent.prototype.toggleNavbar = function () {\n        this.isNavbarCollapsed = !this.isNavbarCollapsed;\n    };\n    NavbarComponent.prototype.getImageUrl = function () {\n        return this.isAuthenticated() ? this.principal.getImageUrl() : null;\n    };\n    NavbarComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-navbar',\n            templateUrl: './navbar.component.html',\n            styleUrls: ['navbar.scss']\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof core_2.LoginService !== \"undefined\" && core_2.LoginService) === \"function\" && _a || Object, typeof (_b = typeof ng_jhipster_1.JhiLanguageService !== \"undefined\" && ng_jhipster_1.JhiLanguageService) === \"function\" && _b || Object, typeof (_c = typeof core_2.JhiLanguageHelper !== \"undefined\" && core_2.JhiLanguageHelper) === \"function\" && _c || Object, typeof (_d = typeof core_2.LoginModalService !== \"undefined\" && core_2.LoginModalService) === \"function\" && _d || Object, typeof (_e = typeof profile_service_1.ProfileService !== \"undefined\" && profile_service_1.ProfileService) === \"function\" && _e || Object, typeof (_f = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" && _f || Object, typeof (_g = typeof core_2.Principal !== \"undefined\" && core_2.Principal) === \"function\" && _g || Object, typeof (_h = typeof course_1.CourseService !== \"undefined\" && course_1.CourseService) === \"function\" && _h || Object, typeof (_j = typeof customer_1.CustomerService !== \"undefined\" && customer_1.CustomerService) === \"function\" && _j || Object, typeof (_k = typeof cart_1.CartService !== \"undefined\" && cart_1.CartService) === \"function\" && _k || Object, typeof (_l = typeof course_cart_bridge_1.CourseCartBridgeService !== \"undefined\" && course_cart_bridge_1.CourseCartBridgeService) === \"function\" && _l || Object, typeof (_m = typeof core_2.UserService !== \"undefined\" && core_2.UserService) === \"function\" && _m || Object, typeof (_o = typeof navbar_service_1.NavbarService !== \"undefined\" && navbar_service_1.NavbarService) === \"function\" && _o || Object, typeof (_p = typeof core_1.ChangeDetectorRef !== \"undefined\" && core_1.ChangeDetectorRef) === \"function\" && _p || Object])\n    ], NavbarComponent);\n    return NavbarComponent;\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n}());\nexports.NavbarComponent = NavbarComponent;\n",{"version":3,"file":"/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/layouts/navbar/navbar.component.ts","sourceRoot":"","sources":["/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/angular-router-loader/src/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/node_modules/tslint-loader/index.js!/Users/shaanjotgill/Documents/smart-cpd-application-v2-3a6205c518b9c2bb4f1774f714eb0702c2136e95/src/main/webapp/app/layouts/navbar/navbar.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeDetectorRef, Component, DoCheck, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { JhiLanguageService } from 'ng-jhipster';\n\nimport { VERSION } from 'app/app.constants';\nimport { JhiLanguageHelper, Principal, LoginModalService, LoginService, Account, IUser, UserService } from 'app/core';\nimport { ProfileService } from '../profiles/profile.service';\nimport { ICustomer } from 'app/shared/model/customer.model';\nimport { ICart } from 'app/shared/model/cart.model';\nimport { ICourseCartBridge } from 'app/shared/model/course-cart-bridge.model';\nimport { CourseService } from 'app/entities/course';\nimport { CustomerService } from 'app/entities/customer';\nimport { CartService } from 'app/entities/cart';\nimport { CourseCartBridgeService } from 'app/entities/course-cart-bridge';\nimport { NavbarService } from 'app/layouts/navbar/navbar.service';\nimport setInterval = require('core-js/library/fn/set-interval');\n\n@Component({\n    selector: 'jhi-navbar',\n    templateUrl: './navbar.component.html',\n    styleUrls: ['navbar.scss']\n})\nexport class NavbarComponent implements OnInit {\n    inProduction: boolean;\n    isNavbarCollapsed: boolean;\n    languages: any[];\n    currentAccount: Account;\n    courseNumber = 0;\n    user: IUser;\n    userID = 0;\n    customer: ICustomer;\n    cart: ICart;\n    bridgeCart: ICourseCartBridge[];\n    tempCart: ICart;\n    swaggerEnabled: boolean;\n    modalRef: NgbModalRef;\n    version: string;\n    flag = false;\n    isCourse = false;\n    isCheckout = false;\n    instanceCnt = 0;\n    flagTemp = false;\n\n    constructor(\n        private loginService: LoginService,\n        private languageService: JhiLanguageService,\n        private languageHelper: JhiLanguageHelper,\n        private loginModalService: LoginModalService,\n        private profileService: ProfileService,\n        private router: Router,\n        private principal: Principal,\n        private courseService: CourseService,\n        private customerService: CustomerService,\n        private cartService: CartService,\n        private courseCartService: CourseCartBridgeService,\n        private userService: UserService,\n        public navbarService: NavbarService,\n        private ref: ChangeDetectorRef\n    ) {\n        this.version = VERSION ? 'v' + VERSION : '';\n        this.isNavbarCollapsed = true;\n        this.bridgeCart = [];\n    }\n\n    /**ngDoCheck() {\n        this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n            this.bridgeCart = bridges;\n            if (this.bridgeCart.length !== this.courseNumber) {\n                this.ngOnInit();\n            }\n        });\n    }*/\n\n    /**ngDoCheck() {\n        this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n            this.bridgeCart = bridges;\n            if (this.bridgeCart.length !== this.courseNumber) {\n                this.ngOnInit();\n            }\n        });\n    }*/\n\n    ngOnInit() {\n        // this.courseNumber = this.update();\n        this.languageHelper.getAll().then(languages => {\n            this.languages = languages;\n        });\n\n        this.profileService.getProfileInfo().then(profileInfo => {\n            this.inProduction = profileInfo.inProduction;\n            this.swaggerEnabled = profileInfo.swaggerEnabled;\n        });\n        setInterval(() => {\n            this.isCourse = this.router.url.includes('/course', 0);\n            this.isCheckout = this.router.url.includes('/checkout', 0);\n            if ((this.isCourse || this.isCheckout) && this.navbarService.check) {\n                this.update();\n            }\n        }, 1000);\n        // this.courseNumber = this.navbarService.courses;\n    }\n\n    update() {\n        if (this.courseNumber === 0) {\n            this.principal.identity().then(account => {\n                this.currentAccount = account;\n                this.userService.getemail(account.email).subscribe(users => {\n                    this.userID = users;\n                    this.customerService.getuser(this.userID).subscribe(customer => {\n                        this.customer = customer;\n                        this.cartService.check(this.customer.id).subscribe(carts => {\n                            this.cart = carts;\n                            this.tempCart = this.cart;\n                            this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n                                this.bridgeCart = bridges;\n                                if (this.cart.checkout) {\n                                    this.courseNumber = 0;\n                                    this.navbarService.setNum(0);\n                                } else {\n                                    this.courseNumber = this.bridgeCart.length;\n                                    this.navbarService.setNum(this.bridgeCart.length);\n                                }\n                            });\n                        });\n                    });\n                });\n            });\n        } else {\n            this.courseCartService.getcollection(this.cart.id).subscribe(bridges => {\n                this.bridgeCart = bridges;\n                if (this.cart.checkout) {\n                    this.courseNumber = 0;\n                    this.navbarService.setNum(0);\n                } else {\n                    this.courseNumber = this.bridgeCart.length;\n                    this.navbarService.setNum(this.bridgeCart.length);\n                }\n            });\n        }\n        /**else {\n            this.navbarService.reset();\n        }*/\n        this.navbarService.donotCheck();\n    }\n\n    changeLanguage(languageKey: string) {\n        this.languageService.changeLanguage(languageKey);\n    }\n\n    collapseNavbar() {\n        this.isNavbarCollapsed = true;\n    }\n\n    isAuthenticated() {\n        return this.principal.isAuthenticated();\n    }\n\n    login() {\n        this.modalRef = this.loginModalService.open();\n    }\n\n    logout() {\n        this.collapseNavbar();\n        this.loginService.logout();\n        this.router.navigate(['']);\n    }\n\n    toggleNavbar() {\n        this.isNavbarCollapsed = !this.isNavbarCollapsed;\n    }\n\n    getImageUrl() {\n        return this.isAuthenticated() ? this.principal.getImageUrl() : null;\n    }\n}\n"]}]}